<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShareCore</title>
  <subtitle>Justin.H</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sharecore.net/"/>
  <updated>2016-06-21T17:13:03.000Z</updated>
  <id>http://sharecore.net/</id>
  
  <author>
    <name>Justin.H</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>超越辯論的價值</title>
    <link href="http://sharecore.net/2016/06/22/%E8%B6%85%E8%B6%8A%E8%BE%AF%E8%AB%96%E7%9A%84%E5%83%B9%E5%80%BC/"/>
    <id>http://sharecore.net/2016/06/22/超越辯論的價值/</id>
    <published>2016-06-21T17:12:39.000Z</published>
    <updated>2016-06-21T17:13:03.000Z</updated>
    
    <content type="html">&lt;p&gt;我不在乎是否能辯贏你，只在乎我能從你那獲取到什麼信息。&lt;/p&gt;
&lt;p&gt;日常生活中、工作中、網絡上，總是會碰到各種意見不同者，你跟他說歷史，他跟你說現狀，你跟他全局考慮，他就以局部問題反駁，等等，只要你有自己的觀點，并表達出來，那就會有人反對你。這本是正常不過的事情，每個人的從小到大經歷的環境，讀書的多少決定了他的世界觀、價值觀，那看待同一件事情的觀點肯定會有所不同。只是有一個怪現象是，越是知之甚少的人，越是喜歡用自己觀點說服別人，將自己意見強加于人，甚至是，他們自己的觀點連自己都說服不了，卻喜歡用來說服別人。對於這類人，他們並不是追求真理，而是為了享受將別人踩在腳下之快感。&lt;/p&gt;
&lt;p&gt;年輕時，讀書少，所知事少，不知天高地厚，我也喜歡與人爭論，凡事都喜歡與人分個對錯，但是較之於當下有些人，我的優點是，如果我所堅持的觀點，必然是我自己信服的觀點，而且無論別人怎麼看，我會堅持自己的觀點做下去，如果一個觀點，自己都不信服，說出來是不負責任的。&lt;/p&gt;
&lt;p&gt;至如今，得了教訓，受了書經指引，越發敬畏於別人的觀點，敬畏世界的複雜，敬畏人性的可怕，哪怕我能輕易發現別人的觀點存在明顯的邏輯錯誤，我也不會迅速與之辯駁。而會更願意思考，是什麼樣的環境、背景使他擁有了這樣的觀點呢？而每每把這觀點背後的成因想清楚后，也就釋然了，理解他錯誤的原因，更不想與之作任何辯駁了。通過這樣的了解與思考過程，我能很好的分析人的心理，分析事物的成因，鍛煉了自己的保證邏輯嚴密的思考能力。還有一類人，他們的觀點與思考，超過了我，思考比我更具有邏輯性、遠瞻性，或者掌握該事物更充分的信息，對於這類人，我更不應該與之過多辯駁，而是應該保持謙恭的態度，嘗試從他身上學到更多我所不具有的能力、知識等等，只有狹隘之人，才會與超過自己的人辯駁，去獲得暫時的、虛偽的“超越快感“。&lt;/p&gt;
&lt;p&gt;所以，綜上所說，與其花時間去跟人辯論，其實不如花時間去了解、去思考、去嘗試獲取更多自己不具有的信息與知識，這遠遠超越了辯論本身的價值。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我不在乎是否能辯贏你，只在乎我能從你那獲取到什麼信息。&lt;/p&gt;
&lt;p&gt;日常生活中、工作中、網絡上，總是會碰到各種意見不同者，你跟他說歷史，他跟你說現狀，你跟他全局考慮，他就以局部問題反駁，等等，只要你有自己的觀點，并表達出來，那就會有人反對你。這本是正常不過的事情，每個人的
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>電子閱讀的問題反思</title>
    <link href="http://sharecore.net/2016/06/20/%E9%9B%BB%E5%AD%90%E9%96%B1%E8%AE%80%E7%9A%84%E5%95%8F%E9%A1%8C%E5%8F%8D%E6%80%9D/"/>
    <id>http://sharecore.net/2016/06/20/電子閱讀的問題反思/</id>
    <published>2016-06-20T13:01:28.000Z</published>
    <updated>2016-06-20T13:05:00.000Z</updated>
    
    <content type="html">&lt;p&gt;去年開始，借助Kindle開始閱讀電子書。不得不說，它幫我解決了兩大讀書問題：一是收藏和攜帶書籍的問題，我不用再為家裏書籍堆積如山而發愁，也不用每次外出，為選擇帶什麽書而煩憂，二是購書更為方便，無需再忍受物流運輸時間的耽擱，即買即上手。這兩大問題的解決，讓我現在購書都是優先選購電子版本。而最近，亞馬遜更是推出了一個電子書包月借閱的服務，將原來線下租借借書籍的功能搬到了線上，讀者能花更少的錢，而讀到更多的書，進一步解決了購書花錢之問題。&lt;/p&gt;
&lt;p&gt;任何事情均如此，若它帶來了明顯的收益時，人們就容易忽視了它的缺點，而沉迷其中。這種沉迷如果過度，終還是不好。不如在體會它的方便時，也謹慎反思它的缺點。於我看來，電子化閱讀帶來了上面的方便，同時也產生了以下的兩個問題值得注意：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、家裡少了藏書，讀書的氣氛會受影響。&lt;/strong&gt; 不得不說，家裡堆滿書籍，哪怕不讀，對於培養小孩讀書習慣來說是很有正面之作用。依稀記得我的小時候，家裡的閣樓上，父輩們將他們的教科書堆積存放著，就成了我最開始的讀書啟蒙了，後來，去舅父家，舅父是好學習之人，有一個不大的書櫃，這個書櫃吸引了我所有的注意力，裡面的書儘管有很多是在那個年紀看不懂的，但是翻書的愉悅感，我今天還清晰記起。而我們今天，如果書籍均電子化，孩子就接觸不到書了，他們接觸的只有屏幕，我們平時拿起Kindle閱讀，在他們看來跟看電腦、玩手機無異，這是我所擔心的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、方便迅速購書以及低廉的價格，購書選書變得更為隨意。&lt;/strong&gt;古人說，書非借不能讀也，是很有道理的，對輕易方便之事，我們從心裡上是不知珍惜的，人之常情。缺乏了選擇和分辨之耐心，懷著買來讀讀再說的心裡，最後的結果是買了一堆爛書被置之不理，不只是浪費了金錢，還費了時間行了無意義之事情。另外，若是慎重選書，必然需要去查閱很多資料，去讀他人的一些推薦、讀後感等，搜索和閱讀這些信息的過程，經常會發現更多的好書，意外之喜甚多。而少了慎重選書的過程，就品嘗不到這種信息搜索過程中的『麵包屑』了，甚為遺憾。&lt;/p&gt;
&lt;p&gt;讀書之本質問題不是怎麼讀，甚至也不是讀什麼書，而是讀和未讀的問題。電子化閱讀帶來的上面兩個問題，其實就關乎讀與未讀。沒有讀書氛圍，小孩就可能不讀書，長大後也不讀書，而輕易選擇一堆爛書慢慢會喪失了讀下去的動力，將很多的時間花在從一堆爛熟里挑選可讀和願意讀的書上，以至於『無書可讀』。&lt;/p&gt;
&lt;p&gt;讀者慎讀！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年開始，借助Kindle開始閱讀電子書。不得不說，它幫我解決了兩大讀書問題：一是收藏和攜帶書籍的問題，我不用再為家裏書籍堆積如山而發愁，也不用每次外出，為選擇帶什麽書而煩憂，二是購書更為方便，無需再忍受物流運輸時間的耽擱，即買即上手。這兩大問題的解決，讓我現在購書都是優先
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>讀點王陽明</title>
    <link href="http://sharecore.net/2016/06/20/%E8%AE%80%E9%BB%9E%E7%8E%8B%E9%99%BD%E6%98%8E/"/>
    <id>http://sharecore.net/2016/06/20/讀點王陽明/</id>
    <published>2016-06-19T17:12:13.000Z</published>
    <updated>2016-06-19T17:13:11.000Z</updated>
    
    <content type="html">&lt;p&gt; 下午翻書，讀錢穆老先生的一本小書《陽明學述要》，尚未讀完，只先初步了解了王陽明生前一番經歷。對於陽明心學，只是在術語的字面上，所知一二，如所謂的“致良知”、“知行合一”等等。人總是懶惰的，喜歡用自己的既有的知識和經驗去解釋碰到的新概念，所以對於陽明學的這些概念，我只是用自己固有的經驗去理解，不覺有什麼高深，權當其為無用之學。這番讀書，了解王守仁是在怎樣的一番苦難經歷下，才提煉升華出這幾大哲學概念，甚為欽佩，更望做更為全面之了解。&lt;/p&gt;
&lt;p&gt;陽明生於官宦之家，家境甚優，幼年讀書，十二歲即隨祖父與父親遠宦京師，成長與詩禮之下。少年始，他就興趣甚廣，有著不可羈束的好奇心和浪漫情趣，好與人學各種學說，如新婚夜道士對壘修養生之道竟忘歸，慕功績與豪傑而出塞逐胡兒騎射，修朱熹格物之學格竹子七日而病倒，感慨于邊疆戰事而留心武事，讀盡兵家書等等，實乃一個多方面有趣味之人，在他內心，充滿著一種不可言喻的熱烈追求，一毫不放鬆地往前趕著。但我想，年輕而氣盛時的王陽明，肯定也跟我當下一樣，有著無窮的內驅力，對未知的領域充滿情趣，卻還是苦於不知究竟未來路在何方，在哪條道上可以為“天下第一等事”。&lt;/p&gt;
&lt;p&gt;三十一歲，陽明告病歸故里，這時他又將三十年的壯熱激情收斂起來，選擇離世遠去，遁入靜境。一個在過往生涯中絕不安分之人，能在一念之間選擇出世，那此人真正的品性是好靜的，更是善於認真思考有執著於自己內心之人。我不由思考，一個人無論其表面怎麼喜歡與世有爭，如若他能隨時地安靜地選擇出世的思考，那其境界必將高普通人一等也。&lt;/p&gt;
&lt;p&gt;三十三歲，又選擇重入政界，沒料到這次的政界之旅，是其人生最為重要的經歷，在我們看來，也是苦難的經歷。同時他開始授徒講學，立異好名，雖未成學，也是春風得意之時。只是未料，政治的風雲變化，終是逃不過，朝天閹官把權，良臣遇害，其義氣相救，卻得來詔獄之禍，廷杖四十，謫貶貴州，當了一個小小的驛丞。在貴州瘴疬之地，大病一場，同時還有人暗殺，時時需要警覺，以求保命。可越是在困厄之時，他奮發出極為自在的情態，當他的幾個僕人相繼病倒，他選擇自己服伺僕人，為他們端茶送藥，無居住之室，又教人範土架木而居，沒碰到一個困難，他都積極地去解決，儘管環境變化，但是他還是表露出一貫的人格，還是倔強，還是高興，內心深處還是奮鬥著。而正是在這種複雜的的狀態下，他卻從此發明了他的“格物致知”新學說。&lt;/p&gt;
&lt;p&gt;這一番的了解，讓我對陽明學說另眼相看，不再把它看成是幾個學術名詞而已，他的這些學說背後，是有生命的，是有著人生經歷的，是從很複雜的經驗中演變而來。他說“立志”，說“知行合一”，說“真切”，這一切都要用他的的經歷來下注釋，才能了解他說的意義。而同時，我們若忘了自己的實際生活經歷而空聽他的說話，那所得也還是不切身的，膚淺而已。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 下午翻書，讀錢穆老先生的一本小書《陽明學述要》，尚未讀完，只先初步了解了王陽明生前一番經歷。對於陽明心學，只是在術語的字面上，所知一二，如所謂的“致良知”、“知行合一”等等。人總是懶惰的，喜歡用自己的既有的知識和經驗去解釋碰到的新概念，所以對於陽明學的這些概念，我只是用自
    
    </summary>
    
    
      <category term="历史" scheme="http://sharecore.net/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>文字之殤</title>
    <link href="http://sharecore.net/2016/06/17/%E6%96%87%E5%AD%97%E4%B9%8B%E6%AE%A4/"/>
    <id>http://sharecore.net/2016/06/17/文字之殤/</id>
    <published>2016-06-17T13:22:07.000Z</published>
    <updated>2016-06-20T11:51:44.000Z</updated>
    
    <content type="html">&lt;p&gt;今日讀《破解古文字的故事》，讀完了羅塞塔文字之謎解開的過程。對文字的發展演化形成了一點看法。我一直堅持再用繁體字寫作、寫微博、發朋友圈，在一個周圍人都使用簡體字的環境，這種特立獨行難免會讓人誤會成有裝作之嫌。我一直不屑於給他們解釋我用繁體字的原因，有人問到，只是告訴他們，你們看我用繁體字寫的東西，是學習繁體字的一個機會，要珍惜。&lt;/p&gt;
&lt;p&gt;別人珍惜不珍惜這樣的機會，我當人無法左右，但我卻實實在在地將平常用繁體字寫作當成我認識、銘記繁體字的一個機會，在日常的習慣中去應用，也幫我省掉了集中花大量時間去學習。&lt;/p&gt;
&lt;p&gt;從繁體字激進的改變成簡體字，是一次斷崖式的升級，不符合漢字原來漸進式的進化方式。無論時表音文字，還是表意文字，他們的都會在細節處保留其進化的痕跡。但是漢字的簡化，卻宛如一次激進的基因突變，比如簡體字“马”，如果只看字體，你根本無法再聯想到它原來是表示馬的形體的符號。所有對漢字的認知，完全是依賴於自身的條件反射。&lt;/p&gt;
&lt;p&gt;自然演化之事情，如果因為眼前的短暫利益，採取過度干預的方式，加速其演化的進度，都是不適合的，只是一種致命的自負。短期的利益滿足，一般都是因為獨立看待事情，缺乏了系統化的看待。如漢字簡化，在當時來看，確實可以增加書寫的速度、但是誰能想到，當代計算機技術的發展，書寫速度根本不是問題。反倒是，它丟掉了它的本真，這是卻永遠無法再找回來的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今日讀《破解古文字的故事》，讀完了羅塞塔文字之謎解開的過程。對文字的發展演化形成了一點看法。我一直堅持再用繁體字寫作、寫微博、發朋友圈，在一個周圍人都使用簡體字的環境，這種特立獨行難免會讓人誤會成有裝作之嫌。我一直不屑於給他們解釋我用繁體字的原因，有人問到，只是告訴他們，你
    
    </summary>
    
    
      <category term="历史" scheme="http://sharecore.net/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>勿增實體</title>
    <link href="http://sharecore.net/2016/06/17/%E5%8B%BF%E5%A2%9E%E5%AF%A6%E9%AB%94/"/>
    <id>http://sharecore.net/2016/06/17/勿增實體/</id>
    <published>2016-06-17T13:11:30.000Z</published>
    <updated>2016-06-20T04:40:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;奧卡姆剃刀原則：如無必要，勿增實體。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;近來思考解決方案，系統設計，在腦海里反思最多的就是這條原則。這一原則，初看來是一句廢話，每個人都知道說，要簡單，不要複雜。很多時候，去跟一個沒經驗的毛頭小子談論，他也會跟你說，簡單就好簡單就好，甚至還會搬出喬布斯來給你說教。而，事實是這些把成天把簡單掛在嘴上的人，大多數是沒經歷過深刻的思考，只為了給自己的思維懶惰找一個藉口而已。&lt;/p&gt;
&lt;p&gt;世界是複雜的，但當然並非是某個特定的實體或者活動是複雜的，而是這些表面上簡單的活動或實體，每一個都有滿足其運行需要的特定要求，把這些簡單的活動和實體聯合在一起，結果就會是複雜和令人困惑的：整體大於各部分的總和。而那些看著單個活動、實體，看不到它們相互之間交合，閉著眼說“簡單就好”的完全是掩耳盜鈴，自欺欺人。&lt;/p&gt;
&lt;p&gt;既然事實如此複雜，那是不是奧卡姆剃刀是一條無用的原則呢？當然不是。在我看來，這條原則的理解上，太多人講注意力放在了“必要”上，而沒看到“實體”。“必要”是一個抽象的意願性描述詞，大多數的時候，因為能契合當下的心理，所以容易吸引多數人的注意，這是自然的。但是深刻思考的人，會將注意力放在“實體”一詞上，會去想什麼是“實體”？“實體”在當下的情況下，是一個什麼樣的定義？缺乏基礎的概念定義，一般是我們爭論和錯誤的罪首。&lt;/p&gt;
&lt;p&gt;如何定義實體，其實就是如何定義事物的邊界，包括兩點：事物運行的特定需求、事物產生的必然效果。一個準確的實體定義，應包括一個盡量小的特定需求集，同時產生一個可以量化的效果。這就好比如計算機程序，如果我們需要能確認這個程序是健壯的，最佳的辦法就是能將他定義成一個最小的輸入條件下滿足一個準確而可量化的結果輸出。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;奧卡姆剃刀原則：如無必要，勿增實體。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;近來思考解決方案，系統設計，在腦海里反思最多的就是這條原則。這一原則，初看來是一句廢話，每個人都知道說，要簡單，不要複雜。很多時候，去跟一個沒經驗的毛頭小子談論，他也會跟你說，簡單就好簡單就好，甚至還會搬
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>不平则鸣</title>
    <link href="http://sharecore.net/2016/06/13/%E4%B8%8D%E5%B9%B3%E5%88%99%E9%B8%A3/"/>
    <id>http://sharecore.net/2016/06/13/不平则鸣/</id>
    <published>2016-06-13T11:49:35.000Z</published>
    <updated>2016-06-16T14:31:54.000Z</updated>
    
    <content type="html">&lt;p&gt;今日读到韩愈的《送孟东野序》一文，为其“不平则鸣”的思想所吸引。源于儒家之传统，向来是习惯遵守仁道，遇不平而忍气吞声的，而韩公作为儒家大师还能有如此不平而鸣之气概，可见其思想的出类拔苹，不与时同。文章开头：大凡物不得其平则鸣…人之于言也亦然，有不得已者而后言。其歌也有思，其哭也有怀，凡出乎口而为声者，其皆有弗平者乎。 说的就是，人遇到不平，必然通过言语表达出来，或将不平写到他得歌与诗里。&lt;/p&gt;
&lt;p&gt;我在《人言无可畏》一文里说的，人都是需要表达的，只是人际关系的道义约束，让人变得不敢言说，将心中的不平与不惑抑制于内心，只待有一个无言语代价的时机，以一种或恶或假或无意义的方式表达出来。但是韩公告诫说，不要做这样的人，他告诉我们，遇到不平，必然用言语作出回响，这是万物必然之理，好比如平静的水面，静立的草木本也无声，但是风吹过他们后，他们必然报以应有的声音作为回应。&lt;/p&gt;
&lt;p&gt;关于韩公的字：退之，有一个故事：说韩公早年，科场屡试不中，偶遇才貌双全卢氏，说起其科场屡次失利的原因，卢氏题字：“人求言实，火求心虚， 欲成大器，必先退之”，韩公沉思，察觉出自己的日常骄傲，缺乏谦虚之情，遂取字“退之”。&lt;/p&gt;
&lt;p&gt;这个故事常用来规劝我们要谦虚为人，而在我看来，这应该是个杜撰的故事，或者说是漏洞百出的故事，因为从韩公后来的文字与为人来看，其一生基本与“退之”绝缘，此“不平则鸣”的《送孟东野序》一文就是例证。其名篇《伯夷颂》更是说：士之特立独行，适于义而已，不顾人之是非，皆豪杰之士，信道笃而自知明也。明显表露出，韩公作为一个有独立思想的读书人不会随波逐流，而是只会按他自己的道义来行事，也不会顾虑他人讲的是是非非，坚持自己的信仰，明明白白自己的为人。如此，坚持个人道义信仰之人，怎可被称为“退之”呢？&lt;/p&gt;
&lt;p&gt;韩公一生推动继承先秦两汉散文的传统，逆当时流行的骈体文之风，以致后被苏轼称为是“文起八代之衰”，足见其敢于挑战潮流之志。韩公又不遗余力推行“师道”，与当时“以为师而耻”的时代风气作对，而在佛、到盛行的大唐，韩公又是一个一生不与佛、道为行，不惧鬼神之人。短短五十多岁的人生，韩公从未“退之”，而是逆流勇进，敢为天下先。&lt;/p&gt;
&lt;p&gt;暂且不论，韩公坚守和奉行的道义之事，以今人眼光来看，是对或错，而其敢于守个人道义，抒不平之意，行不苟合之事，是我们非常缺乏的一种时代精神。我们也许真的没必要对周围不合自己道义的事情过于忍气吞声，也没必要为自己所行之事过多考虑是不是为潮流所容纳，遇不平则鸣，遇不义则逆，这是最符合人性的常情。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今日读到韩愈的《送孟东野序》一文，为其“不平则鸣”的思想所吸引。源于儒家之传统，向来是习惯遵守仁道，遇不平而忍气吞声的，而韩公作为儒家大师还能有如此不平而鸣之气概，可见其思想的出类拔苹，不与时同。文章开头：大凡物不得其平则鸣…人之于言也亦然，有不得已者而后言。其歌也有思，其
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>人言无可畏</title>
    <link href="http://sharecore.net/2016/06/13/%E4%BA%BA%E8%A8%80%E6%97%A0%E5%8F%AF%E7%95%8F/"/>
    <id>http://sharecore.net/2016/06/13/人言无可畏/</id>
    <published>2016-06-13T11:48:11.000Z</published>
    <updated>2016-06-13T11:49:14.000Z</updated>
    
    <content type="html">&lt;p&gt;去年，天津爆炸的悲剧上演，看着鲜活的生命逝去，悲悯之心当然是不能避免的，这是作为善良之辈的常情使然。只是每一次悲惨的事故，最终却会演化成社会、网络上各派力量的针锋相对，彼此猜测和质疑的一幕闹剧，而随着时间慢慢推移，闹剧也会渐渐收场，大家好像突然都健忘了，情绪慢慢收敛，直到下一次的闹剧来临，将平复的情绪导向另一波高潮。而将民众情绪推向高潮的，是那些接连不断，纷然混乱，真伪莫辨的传说，我们当然也很习惯武断地将它定义为：谣言。&lt;/p&gt;
&lt;p&gt;语言是情绪排泄的通道。但我们却是生活在一个没有表达宽容度的环境，一句“人言可畏”吓坏了多少想说话的人。对于身边的事情我们都只能欲言又止，因为大家都习惯了用恶意的眼光看待周围的事物，包括言语。中庸之道横行，对于与己相关的世事，大家都习惯唯唯诺诺，尽量保证与之言语的对方，不会对自己产生恶意的理解，也就是常说的：不在言语上得罪人。可是，信奉中庸平和之道的社会，为何又会“谣言四起”呢？甚至这些“谣言”都是明显带有恶意的。我看原因就出在这中庸之道上的言语尊重。我们对周围人的客气，表达上的唯唯诺诺，灭不掉我们内心深处的表达诉求。当被周遭的人情世故压抑的太久，太多的“怨声载道”不能表达出来时，我们就将所有恶意的猜测与言语，在一次次的事故的风口上一股脑发泄出来。因为这些事故，一般都不与自己的人际关系直接相关，表达假与丑就都变得没有代价。没有代价，同时还能带来情绪排泄的快感 ，性价比很高，那就不如将所有积压的愁怨，一次性的释放出来。所以，整个人际关系对言语的不宽容而造成的全社会表达孤独，是每次“谣言四起”的真正祸根。&lt;/p&gt;
&lt;p&gt;人际之间对表达的不容忍，是几千年来深根于儒家土壤里的一棵毒蘑菇，一时半会，还没法去拔掉它，环境既然改变不了，谣言就必将存在。认识和承认谣言的必然存在性很重要，因为这决定了对待谣言的态度。我想，我们的主权者是没有认识到这一点的，从他们每次针对谣言祭出大棒来棒杀就可以看出其认识上的肤浅性。当谣言威胁到他们时，就成了“人言可畏”，他们过于敏感的神经，必然给出剧烈的反应。须不知，民众的思维向来都是线性的，在民众眼中，主权者反应剧烈的，就是离真相更近的事实，因为他们从来都不会信任任何主权者。而如果主权者能放开忌讳，人言无可畏，那就不会反应过度，而是会去用足够的事实与信息，去击破一个个可能不真实的谣言，也会有足够的诚意，去面对可能是真相的事实。主权者以宽容的姿态接受质疑，相信人言不可畏，另外一个好处就是能引导民众人际之间的表达宽容，缓解全社会的表达孤独。&lt;/p&gt;
&lt;p&gt;我们看似找到了破解谣言的药方，但是却会发现，这个药方，在一个从上至下的制度环境里，并不可行。从上至下，权力集中，哪来的宽容？少数人的决策，利益集中，谁愿改革？我们只能期望，传统的厚积能自身被慢慢被稀释，更加愿意相信人言无可畏，我们的表达孤独能不再被压抑，会有一个人际间表达更宽容的明天。&lt;/p&gt;
&lt;p&gt;应该会有吧？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的声音我听不见 现在是太吵太乱&lt;br&gt;你已经看了这么长的时间你怎么还不发言&lt;br&gt;是谁出的题这么的难 到处全都是正确答案&lt;br&gt;   ——何勇《钟鼓楼》(歌曲)&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年，天津爆炸的悲剧上演，看着鲜活的生命逝去，悲悯之心当然是不能避免的，这是作为善良之辈的常情使然。只是每一次悲惨的事故，最终却会演化成社会、网络上各派力量的针锋相对，彼此猜测和质疑的一幕闹剧，而随着时间慢慢推移，闹剧也会渐渐收场，大家好像突然都健忘了，情绪慢慢收敛，直到下
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>设计的思考</title>
    <link href="http://sharecore.net/2016/06/13/%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://sharecore.net/2016/06/13/设计的思考/</id>
    <published>2016-06-13T11:44:38.000Z</published>
    <updated>2016-06-13T11:47:47.000Z</updated>
    
    <content type="html">&lt;p&gt;今天去一个商场找厕所，发现一个很奇葩的设计，厕所的门口前面有一个大概十米的走廊，从走廊的这一头，抬头可以看到走廊另一头女厕所 的标记，可是男厕所的标记却无法看见。好多位男士跟我一样站在走廊的这一头，不敢往里面走，怕走错进了女厕所。我环顾四周，确实没发现周围还有男厕所，只好冒着胆子往里走，大概走到女厕所的门口，才发现男厕所在我的右手边，它图标却挂在进去的门里，难怪站在走廊那一头，死活发现不了。&lt;/p&gt;
&lt;p&gt;这真是一个让人尴尬和难受的上厕所体验，这样的设计是明显反人类的。在我们的日常生活中，其实到处都充斥着这样的设计，设计者不经思考的设计，让我们原本简单的生活变得复杂与艰难。比如下面的设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;红灯可右转，在日常生活中，红灯亮后，车辆是不能行使的，现在将规则改成红灯可右转，让右转道上过马路的行人就不知如何是好了，司机和行人的理解误差和时间冲突，更容易造成事故。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电梯楼层按键，电梯的楼层按键一般设计为每层一个按钮，按钮上得数字表示了相应的楼层。当一栋楼只有10来层的，这还不是什么问题，但当一个楼层超过三十层，在三十个按钮数字里要找到你的目标，这真是对眼力的考验。尤其很多时候，电梯的光线还不充足的情况下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;电视机的遥控，他的按键加起来最少超过20个，一般情况下每个按键都是一个功能，但有的按键的功能超过一个，甚至是几个。所以，如果你要学会使用，就必须记住每个按键代表了哪些功能，还要记住按键之间的操作顺序。&lt;/p&gt;
&lt;p&gt;以上的种种不合理，我们每天的生活都得要顺应接受着，甚至当你不小心违反了它的规则设计，或者根本不会使用某项功能时，还要被歧视，说你掌握的知识不够，或思维反应慢等。可这些糟糕的问题，真的是我们自己的原因造成的吗？显然不是，我们只是不合理设计的受害者，让我们陷入难堪的不是我们自己的愚蠢，是设计者的愚蠢。明白这一点很重要，只有受害者不再“忍气吞声”，才能让设计者多点思考，做出更合理的设计。&lt;/p&gt;
&lt;p&gt;设计中有一条很重要的原则：&lt;strong&gt;可视性&lt;/strong&gt;。它说的是设计出的产品，其正确的操作部位必须是显而易见的，而且能向用户传达正确的信息。而我们上面的厕所走廊设计和电梯按钮设计，显然是违背这一原则的，厕所的走廊，没有将男厕所的标记放在最明显的地方，传达出“这里有男厕所的信息”，才造成了所有男士的尷尬；而电梯的按钮，将正确的按钮藏在一堆按钮之间，并且每个按钮颜色、大小等都是一样的，造成了使用者根本难以找到正确按钮的问题，电视机的遥控也同样如此，功能和按键的不一一对应，导致使用者必须自己记住每个功能的操作，而不是通过按键的提醒就可以完成。&lt;/p&gt;
&lt;p&gt;设计中的另外一条重要设计原则：&lt;strong&gt;匹配&lt;/strong&gt;。匹配原则是指产品的设计必须使用者所在的环境和使用者既存的日常经验是一致的，比如音量的旋转按钮，超右旋转是声音加大，朝左是减小，现在将调节器改成两个按键，那就不能将加大声音的按键放至左侧，减小声音的按键放右侧，因为这跟使用既有的经验传承是不匹配的。上面所说的红灯可右转造成的困扰也是一样不符合匹配原则的，人们日常的认识里就是红灯代表车辆静止的，现在改成可右转行使，必然出现认知的冲突。&lt;/p&gt;
&lt;p&gt;违反可视性和匹配原则的设计，&lt;strong&gt;从认知心理学上来讲，主要是将原来可以通过“系统1”思考(即直觉的快思考)的问题，强迫使用者使用“系统2”思考(即推理性的慢思考)来完成，“系统2”的思考明显是更消耗人类的能量的，所以才会导致使用起来时感到不适。&lt;/strong&gt; 使用者本来也不应该将自己的精力浪费在原来不需要浪费的地方，精力的分散将导致其真正要耗费思考和决策的地方变得低效。为使用者减少不必要的精力浪费，是设计的必尽义务。设计者的思考是具有杠杆作用的，设计者多花一分精力思考，能节省使用者十分的精力。&lt;/p&gt;
&lt;p&gt;告诫自己：多观察日常中不合理的设计，反思自己曾做出的设计，到底是方便了使用者，还是增加了麻烦？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天去一个商场找厕所，发现一个很奇葩的设计，厕所的门口前面有一个大概十米的走廊，从走廊的这一头，抬头可以看到走廊另一头女厕所 的标记，可是男厕所的标记却无法看见。好多位男士跟我一样站在走廊的这一头，不敢往里面走，怕走错进了女厕所。我环顾四周，确实没发现周围还有男厕所，只好冒
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>解决问题的思路</title>
    <link href="http://sharecore.net/2016/06/13/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://sharecore.net/2016/06/13/解决问题的思路/</id>
    <published>2016-06-13T11:42:21.000Z</published>
    <updated>2016-06-20T13:12:57.000Z</updated>
    
    <content type="html">&lt;p&gt;作为一个技术负责人，帮人解决技术难题是一份不能脱责的工作，平常20%的工作时间是在帮人解决问题。解决问题时也常碰到恼火的情况， 而让人恼火的原因不在问题的本身，在于提出问题的方式。提问题的人如果缺乏对问题基本了解，甚至还无法描述出问题，就将问题抛出，那解答问题的人就需要追本溯源，从问题具体是什么开始追问，然后再去一步步的耐心解决，效率明显低下。很多时候，解答问题的人，怎样才能做到授人以渔而不是授人以鱼呢？&lt;/p&gt;
&lt;p&gt;下面主要说说我对解决问题的一些思路：&lt;/p&gt;
&lt;p&gt;** 1.收集足够的信息描述出问题 **&lt;/p&gt;
&lt;p&gt;什么是问题？我经常给它定义：问题就是信息不对称。最可怕的不是问题本身，是不知道问题出在哪，而不知道问题出在哪，是因为没有收集关于问题的充足信息。当无法用清晰的方式将问题的现象描述出来，说明信息是不充分的。比如经常被问到一个问题：我昨天的程序还是可以跑起来的，但是今天就不能跑起来了。这个问题的表象就是昨天可以运行的今天不能运行了，如果只能这样的描述问题，显然没有掌握充分信息。需要更多地去收集：今天不能运行是因为抛异常了嘛？异常的描述信息有收集吗？异常描述里的关键字有提取吗？有将这些关键字拿到搜索引擎里去搜索别人关于这个关键字的更详细描述吗？有收集昨天和今天运行环境的变化吗？沿着这个思路，90%的问题都可以找到原因。而当你一股脑将问题抛给有经验的人去解决时，他的思路其实也是如此，一步步搜索关于问题的相关描述信息，只是他们更多的是在他们拥有的经验里快速搜索，所以，他们解决问题的速度会更快。可他们的经验，也是经过长时间信息积累后一步步建立起来的，慢慢从“慢思考”转变为了“快思考”。如果你不去经历这样思路和信息积累过程，将永远只能依赖别人的经验。&lt;/p&gt;
&lt;p&gt;** 2.学会问问题，掌握问问题的艺术 **&lt;/p&gt;
&lt;p&gt;个人的经验不足，就需要很多地去依赖过来人的经验。但很多时候，有人问一个技术问题，讲了三分钟后，我只能反问他一句：问题是什么？这真是尴尬。其实被问问题的人，他们最需要知道这几件事：问题发生的场景是什么？已经收集到的关于问题描述信息有哪些？希望问题解决后达到的效果什么？需要说清楚问题发生的场景，现象描述以及达到的效果，是因为这三者是解决问题的人从他的经验里搜索和匹配信息的关键，大多数的情况下，人解决问题的依据都是头脑里现存的信息，而如果你问问题的方式，不能快速帮助被问问题者快速匹配信息，那他解决问题的效率跟你是一样的。重要的事情再重申一遍：问题的场景、现象、需要达到的效果。&lt;/p&gt;
&lt;p&gt;** 3.努力创造问题重现的环境 **&lt;/p&gt;
&lt;p&gt;前文说到，90%的问题可以沿着信息搜集的方式找到原因。但是，另外10%的问题，问题的描述信息却不能轻易的搜集到，而需要努力去重现问题发生的场景，一个能重现的问题就是一个好问题。当然，部分问题的场景重现难度，可能是现有能力不能驾驭的，对于这部分问题，当请求他人协助时，不如就直接请求别人协助构建问题重现的环境。而当然，问题如果真的无法重现，只会敦促你更好地去建立跟踪机制，比如程序的日志功能完善等。有些时候，不构建重现问题的环境，通过暴力的手段，也可以将问题暂时绕过，比如重启程序或者重启设备，但是这样的方式只是暂时，不能保证下一次不再发生。当你用了这种暴力手段，甚至有可能导致重现问题的场景变得更加困难。所以，暴力虽好，且用且慎重。&lt;/p&gt;
&lt;p&gt;** 4.不制造新的问题 **&lt;/p&gt;
&lt;p&gt;有了足够的问题描述信息，靠自己或者依靠他人的经验，可能就能得到解决方案。但是这时，一定要静心下来想一想，解决方案会不会制造新的问题呢？因为新的解决方案难免要就要对现有的情况实施变更，而只要有变更，就会有发生更严重问题的风险。别让你的解决方案成为新的祸根，铭记海恩法则：每一次严重事故的背后，必然有29次轻微事故和300起未遂先兆以及1000起事故隐患！再好的技术，再完美的规章，在实际操作层面，也无法取代人自身的素质和责任心。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个技术负责人，帮人解决技术难题是一份不能脱责的工作，平常20%的工作时间是在帮人解决问题。解决问题时也常碰到恼火的情况， 而让人恼火的原因不在问题的本身，在于提出问题的方式。提问题的人如果缺乏对问题基本了解，甚至还无法描述出问题，就将问题抛出，那解答问题的人就需要追本
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>I/O模型基本介绍</title>
    <link href="http://sharecore.net/2016/06/13/I-O%E6%A8%A1%E5%9E%8B%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://sharecore.net/2016/06/13/I-O模型基本介绍/</id>
    <published>2016-06-13T11:24:36.000Z</published>
    <updated>2016-06-13T11:41:27.000Z</updated>
    
    <content type="html">&lt;p&gt;作为后台开发，高并发和高性能问题，是最常需要面对的。而解决高并发和高性能问题，选择合适的I/O模型是必由之路。本文将对各种I/O模型作基本介绍，并以相应的java代码实现为例。&lt;/p&gt;
&lt;p&gt;在介绍I/O模型之前，我们需要对操作系统的I/O操作流程有一个基本的了解，继而理解同步\异步、阻塞\非阻塞这两个关于I/O操作的不同概念。对于操作系统I/O操作流程，在这不作详细介绍，具体可以参考《深入理解计算机系统》一书，概要说明以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;操作系统的运行区间分为用户态和内核态，用户态即用户应用程序运行的运行空间，只能访问有限的内存，不能访问外围I/O设备，如硬盘、网卡等，内核态可以访问所有内存区域以及所有外围I/O设备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户态的应用程序访问I/O需要通过发起系统调用，由内核线程(指令)来完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内核线程完成相应I/O操作(读取/写入)，数据需要从内核态复制到用户空间的内存，应用程序从内存获取数据，才能继续完成相应业务逻辑的执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步\异步、阻塞\非阻塞这两个概念经常拿在一起说，容易导致混淆，若不能清晰地理解这两个概念，理解I/O模型也会变得困难。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;同步&lt;/strong&gt;:指用户线程发起了I/O请求后，需一直等待或轮询内核I/O操作完成后，才会继续执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;异步&lt;/strong&gt;:指用户线程发起I/O请求后依然继续执行，当内核完成I/O操作后会通知用户线程，或者回调用户线程已注册的回调函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;阻塞&lt;/strong&gt;:指只有内核的I/O操作彻底完成后，才会返回用户空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;非阻塞&lt;/strong&gt;:指I/O操作被调用后，立即返回一个状态值，无需等到I/O操作彻底完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概念上的表述，理解起来可能不太直观，我们以以下的例子来类比说明：&lt;/p&gt;
&lt;p&gt;周末晚上，我去楼下的快餐点打包外卖，点完餐后，老板给了我一张纸质单，让我等会凭这个单子来取外卖，由于我并不知道什么时候外卖能准备后，只能每隔几分钟去前台问一下是否可以了。在等外卖的过程中，我又想去隔壁的甜品店打包一个甜品，点完甜品后，甜品店给了我一个蓝牙电子通知器，在一定范围里，当甜品准备好了，电子通知器会振动，告知我去取甜品即可。所以最后的结果就是，我在快餐店不断询问快餐是否准备好了，同时等着甜品店的电子通知器振动。&lt;/p&gt;
&lt;p&gt;在这个故事里，快餐店接受我的点餐请求后，我并不需要一直等待，还可以去隔壁点甜点，这是一种非阻塞模型，但是我还是需要不断去轮询餐点准备状态，这又是一种同步模型。而甜品店采取主动通知的方式，我并不需要去询问甜品的就绪状态，只需要等待甜品店的主动通知，这是一种典型的异步方式。&lt;/p&gt;
&lt;p&gt;也由此可知，阻塞\非阻塞模型其实都是同步的，而只有采取特需的通知(回调)方式，才能真正实现异步的效果。&lt;br&gt;I/O模型&lt;br&gt;接下来我们基于同步\异步、阻塞\非阻塞的概念，介绍各个I/O模型，并以一个简单的进行socket读写程序的java代码来说明。&lt;/p&gt;
&lt;h2 id=&quot;同步阻塞I/O&quot;&gt;同步阻塞I/O&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;&lt;p&gt;同步阻塞I/O是编程方式最为简单的I/O操作，它是指在用户线程发起I/O操作后，会一直阻塞，直至内核完成I/O操作，将数据复制到用户空间下后才返回继续执行。&lt;/p&gt;
&lt;h3 id=&quot;编程示例&quot;&gt;编程示例&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SyncBlockedEcho&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BufferedReader in=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Socket socket=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ServerSocket serverSocket=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            serverSocket =  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 当前用户线程获取socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            socket = serverSocket.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(socket.getInputStream()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String inputLine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//阻塞直读取完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((inputLine = in.readLine()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(inputLine);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//do close&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同步阻塞I/O作为最简单的一种I/O模型，其最大问题是用户线程在整个I/O操作过程中是被阻塞的，也就是说在I/O操作过程中，用户线程不能做任何事情，而I/O操作并不需要过多CPU参与，也就以为着这种模式对CPU的利用率明显不高。同时当前用户线程由于被阻塞，并不能继续接受新的socket连接，不适合高并发的场景，鉴于此，我们可以采取多线程的模式作为改善。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SyncBlockedThreadPoolEcho&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ServerSocket serverSocket=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ExecutorService pool = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            serverSocket =  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 当前用户线程获取socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Socket  socket = serverSocket.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pool.submit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            BufferedReader in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(socket.getInputStream()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            String inputLine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((inputLine = in.readLine()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                System.out.println(inputLine);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;comment&quot;&gt;//do close&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//do close&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;采用多线程的模式，解决了主线程因为被阻塞而不能接受新连接的问题，同时，由于可以采取线程池之类的技术，避免线程的重复创建、销毁等带来的性能损失，所以具有了更高的并发处理能力。但是这种模式依然受限于I/O操作的同步与阻塞，面对大并发的场景，需要大量的线程来维持连接，而线程越多，会引起内存占用(每个线程都有最小的内存分配要求)、CPU利用率下降(线程之间切换频繁)的问题。&lt;/p&gt;
&lt;h2 id=&quot;同步非阻塞I/O&quot;&gt;同步非阻塞I/O&lt;/h2&gt;&lt;h3 id=&quot;概念-1&quot;&gt;概念&lt;/h3&gt;&lt;p&gt;同步非阻塞I/O是指请求发起后，当前用户线程发起I/O请求后，不会在调用上阻塞，而是立即返回，一般可以通过将socket设置为NONBLOCK的方式来达到此目的。但是由于需要不断地轮询socket的就绪状态，CPU将会浪费在状态轮询上，直到数据就绪，都是无用功。也就是说，当前线程会阻塞在如下的while循环上，实际上起不到真正的非阻塞效果。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(socket.read(buf))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  process(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多路复用&quot;&gt;多路复用&lt;/h3&gt;&lt;p&gt;为了解决这个问题，于是有了I/O多路复用。I/O多路复用建立在操作系统内核提供的select系统调用基础之上，当然他还是需要轮询，只是轮询的对象从socket的就绪状态变为了select系统调用的状态返回，但是他的优势是因为select可以同时返回多个就绪状态的socket，也就是意味着在同一个用户线程，可以同时进行多个I/O请求，而不是上述模型的在单个I/O请求上阻塞，这也是模型概念里“多路”的含义了。我们用以下代码来表述这一特性：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NonBlcokedEcho&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BufferedReader in=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Socket socket=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ServerSocket serverSocket=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ServerSocketChannel serverChannel = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Selector selector = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                serverChannel = ServerSocketChannel.open();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ServerSocket innerSocket = serverChannel.socket();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                InetSocketAddress address = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                innerSocket.bind(address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//设置socket为非阻塞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                serverChannel.configureBlocking(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                selector = Selector.open();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                serverChannel.register(selector, SelectionKey.OP_ACCEPT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//发起select调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    selector.select();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//返回多个就绪状态的socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Set&amp;lt;SelectionKey&amp;gt; keys = selector.selectedKeys();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Iterator iterator = keys.iterator() ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//循环处理多个就绪socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    SelectionKey key=(SelectionKey)iterator.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    iterator.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(key.isAcceptable())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//接受新连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key.isReadable()&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//读取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key.isWritable()&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//写入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//do close&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;异步I/O&quot;&gt;异步I/O&lt;/h2&gt;&lt;p&gt;前面说到的I/O模型，无论是阻塞还是非阻塞模型，都是同步的，而真正的异步I/O需要借助以下特殊的系统API来实现，这其中包括Linux下的AIO，windows/.NET下的BeginInvoke/EndInvoke编程模型等等，Java SE 7后也引入NIO的支持。其基本思想是通过告知内核一些上下文状态信息，注册回调函数，当内核完成I/O操作，并将数据复制到缓冲区后，通过唤起回调函数，达到通知应用程序使用数据的效果，由此可见，异步I/O肯定也是非阻塞的。以下以JAVA NIO的代码为例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncEcho&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DEFAULT_PORT = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ExecutorService taskExecutor = Executors.newCachedThreadPool(Executors.defaultThreadFactory());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (asynchronousServerSocketChannel.isOpen()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                asynchronousServerSocketChannel.setOption(StandardSocketOptions.SO_RCVBUF, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                asynchronousServerSocketChannel.setOption(StandardSocketOptions.SO_REUSEADDR, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                asynchronousServerSocketChannel.bind(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Waiting for connections ...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Future&amp;lt;AsynchronousSocketChannel&amp;gt; asynchronousSocketChannelFuture = asynchronousServerSocketChannel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            .accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AsynchronousSocketChannel asynchronousSocketChannel = asynchronousSocketChannelFuture&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Callable&amp;lt;String&amp;gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callable&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                String host = asynchronousSocketChannel.getRemoteAddress().toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Incoming connection from: &quot;&lt;/span&gt; + host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ByteBuffer buffer = ByteBuffer.allocateDirect(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// transmitting data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (asynchronousSocketChannel.read(buffer).get() != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    buffer.flip();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    asynchronousSocketChannel.write(buffer).get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buffer.hasRemaining()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        buffer.compact();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        buffer.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                asynchronousSocketChannel.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                System.out.println(host + &lt;span class=&quot;string&quot;&gt;&quot; was successfully served!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        taskExecutor.submit(worker);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The asynchronous server-socket channel cannot be opened!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.err.println(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;同步/异步与阻塞/非阻塞是两个不同的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞/非阻塞I/O一般都是同步的，而异步I/O一般都是非阻塞的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步I/O要达到并发的效果，一般采用多路复用模型(select/epoll)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步I/O需要系统内核的特别支持，提供异步操作的API。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为后台开发，高并发和高性能问题，是最常需要面对的。而解决高并发和高性能问题，选择合适的I/O模型是必由之路。本文将对各种I/O模型作基本介绍，并以相应的java代码实现为例。&lt;/p&gt;
&lt;p&gt;在介绍I/O模型之前，我们需要对操作系统的I/O操作流程有一个基本的了解，继而理解
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="架构" scheme="http://sharecore.net/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>天冷讀史</title>
    <link href="http://sharecore.net/2016/01/24/%E5%A4%A9%E5%86%B7%E8%AE%80%E5%8F%B2/"/>
    <id>http://sharecore.net/2016/01/24/天冷讀史/</id>
    <published>2016-01-24T13:29:18.000Z</published>
    <updated>2016-06-17T13:30:14.000Z</updated>
    
    <content type="html">&lt;p&gt;今日的天氣真是冷到了極致，沒有取暖措施，又習慣了暖冬的深圳人，非常不適應，朋友圈都是一片抱怨。我也只好躲在家裡，休息與讀書。心理有個想法，想繼續讀點專業上的書，學些新的技術知識，卻發現遲遲不想行動，真是越來越喪失了專業行動力啊，要想辦法改進了，給自己一個新的目標來激勵自己。&lt;/p&gt;
&lt;p&gt;懶惰的空虛時間，我就只好繼續讀史了，繼續讀呂思勉《三國史話》，今日對他寫的《替魏武帝辯誣》一章有感。魏武帝即曹孟德，儘管在此以其廟號“魏武帝”相稱，但是曹公是一生均為稱帝，魏武帝的廟號是其兒子稱帝追封的。呂公在此章就據曹孟德終身未稱帝為事實，對其公忠、正直與勇敢作了一番評駁。&lt;/p&gt;
&lt;p&gt;常言道，曹孟德”挾天子以令諸侯”，這不是是事實，因為在當時的亂世，天子並沒有任何能約束天下的能力，而各路諸侯也根本不會將天子放在眼裡，這只不過是演義者迎合社會心理的一種戲說而已，而且這種戲說若不是能迎合大多數人的心理，也決不會流傳如此之廣了。以如此不正當的、低下的批評，并不足以識英雄啊！&lt;/p&gt;
&lt;p&gt;曹孟德作為一代梟雄，終生能守護好自己的權慾，這當然有封建制度原有的禮教約束所起的作用，但是也更在於他自身的個人操守，文中列出的事實很多，比如早年曹孟德開始起兵，討伐董卓，本可以連接更多兵力，但他說兵多意盛，和強敵爭衝，反而成為禍始。確實如此，一個人能在自己力量小的時候，或許還能駕馭自己的慾望，但是力量大了，自己的慾望就大了，周遭給的意見也多了，或許就不是自己能駕馭了；再比如他後來破降黃巾三十萬，后有破平袁術、袁紹、劉表，跟人說起這些經過時他又說”設使國家無有孤，不知當幾人稱帝？幾人稱王？”，可見其并無取漢而代之之意，卻又匡扶漢帝之理想。&lt;/p&gt;
&lt;p&gt;我們讀史，更多就是為了獲取歷史的本真事實，以免被世人的演義迷惑了眼，失去了辯駁之力啊。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今日的天氣真是冷到了極致，沒有取暖措施，又習慣了暖冬的深圳人，非常不適應，朋友圈都是一片抱怨。我也只好躲在家裡，休息與讀書。心理有個想法，想繼續讀點專業上的書，學些新的技術知識，卻發現遲遲不想行動，真是越來越喪失了專業行動力啊，要想辦法改進了，給自己一個新的目標來激勵自己。
    
    </summary>
    
    
      <category term="历史" scheme="http://sharecore.net/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>模式匹配初析</title>
    <link href="http://sharecore.net/2014/08/24/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%88%9D%E6%9E%90/"/>
    <id>http://sharecore.net/2014/08/24/模式匹配初析/</id>
    <published>2014-08-24T04:58:29.000Z</published>
    <updated>2016-06-20T13:14:17.000Z</updated>
    
    <content type="html">&lt;p&gt;前几天看到篇C#6.0的draft spec，发现C#6.0里将惊现模式匹配。如是便在做了翻宣讲说“模式匹配”是一个很好用的特性，但是不知道跟C#的结合会怎么样。而同时却又发现周边了解“模式匹配”的人好少，于是诞生了写一篇文章稍微介绍下这一功能特性的想法。&lt;/p&gt;
&lt;p&gt;如果说模式匹配这一概念有人不知道，但是正则表达式应该绝大多数的程序员都知道的了。而简言之，模式匹配就是更强大的正则表达式，或者说正则表达式是模式匹配这一概念在字符串处理上的一个应用。有了正则表达式为例，我们可以为模式匹配定义一个更为通用的定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;模式匹配是判断输入的数据（信息）是否与特定的结构相匹配，并按模式从中取得数据（信息）。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如下以正则表达式为例，从输入数据value里按pattern提取数据digits的模式匹配过程。&lt;/p&gt;
&lt;p&gt;```javascript&lt;br&gt;var value=”abc123”;&lt;br&gt;var pattern=/\d/g;//定义模式&lt;br&gt;var digits=value.match(pattern);//[“1”,”2”,”3”]&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;那更广泛意义上的模式匹配是什么呢？其实很简单，就是输入/提取数据（信息）的范围不再局限为字符串了，甚至可以是编程语言支持的所有数据结构。第一次接触模式匹配这一概念，是前几年学习erlang的时候，下面就主要以erlang为例，来对模式匹配稍作介绍。&lt;/p&gt;
&lt;p&gt;先上点erlang里的”甜点”为例来说明：&lt;/p&gt;
&lt;p&gt;(erlang基础知识：大写字母开头的声明为变量，比如下面例子里的P，H,T;小写字母的声明是原子,比如abc)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;模式{&lt;span class=&quot;function_or_atom&quot;&gt;abc&lt;/span&gt;，&lt;span class=&quot;variable&quot;&gt;P&lt;/span&gt;}与输入数据项{&lt;span class=&quot;function_or_atom&quot;&gt;abc&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;}匹配，并在匹配的同时，发生绑定&lt;span class=&quot;variable&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;arrow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;

模式[&lt;span class=&quot;variable&quot;&gt;H&lt;/span&gt;|&lt;span class=&quot;variable&quot;&gt;T&lt;/span&gt;]与输入数据项[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]匹配，并在匹配的同时，发生绑定&lt;span class=&quot;variable&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;arrow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;arrow&quot;&gt;-&amp;gt;&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一个例子匹配的过程如下：&lt;/p&gt;
&lt;p&gt;1.先进行类型匹配：模式和数据项都是一个元组（“{}”），匹配通过。&lt;/p&gt;
&lt;p&gt;2.模式元组的第一个元素为常量，进行匹配：模式和数据项都是“abc”,匹配通过。&lt;/p&gt;
&lt;p&gt;3.模式元组的第二个元素是一个变量P，同时后面不再有任何元素，结束匹配，并将P绑定到数据项第一个元素后的所有元素。&lt;/p&gt;
&lt;p&gt;第二个例子匹配过程如下：&lt;/p&gt;
&lt;p&gt;1.先进行类型匹配，模式和数据项都是一个列表（“[]”），匹配通过。&lt;/p&gt;
&lt;p&gt;2.模式”[H|T]”表示的是一个“首尾”匹配，用“|”分开两个变量（H，T），H表示的首元素匹配，T表示尾部（除首元素外的所有元素）匹配。匹配是通过的,并绑定H和T的值为首元素和尾元素。&lt;/p&gt;
&lt;p&gt;再来一个高级点的例子：使用模式匹配来处理消息的接收：&lt;/p&gt;
&lt;p&gt;(erlang基础知识：erlang的调用是基于CSP的，各个actor之间通过消息通讯带完成调用;receive原语是erlang提供的消息接收机制，可监听和接收来自其它actor发送来的消息;”！”标识符用于向对应的actor发送消息)。&lt;/p&gt;
&lt;p&gt;```erlang&lt;br&gt;loop(Dict) -&gt;&lt;br&gt;  receive  %消息接收的原语，获取调用方的消息&lt;br&gt;      {store, Key, Value} -&amp;gt; %匹配数据存储的消息，”store”&lt;br&gt;          loop(dict:store(Key, Value, Dict)); %真实的存储&lt;br&gt;      {From, {get, Key}} -&amp;gt; %匹配数据获取的消息, From匹配消息来源，&lt;br&gt;          From ! dict:fetch(Key, Dict), %向查询请求消息来源发送查询结果消息&lt;br&gt;          loop(Dict) %尾递归：持续监听新的消息&lt;br&gt;end.&lt;/p&gt;
&lt;p&gt;Pid = spawn(loop) %启动一个进程(actor)，Pid为进程号&lt;/p&gt;
&lt;p&gt;Pid!{store ,key1,”123”} %向进程发送一个键值对存储消息&lt;/p&gt;
&lt;p&gt;Pid!{get,key1} %发送一个查询消息，获取”key1”对应的值&lt;br&gt;```&lt;/p&gt;
&lt;p&gt;上面展示例子模式匹配在erlang中进行消息匹配的使用，需要注意的一点是，这里的匹配是从上到下来进行的，即会先进行“store”的匹配，匹配失败的话才进行“get”匹配。消息匹配是erlang里的一项杀手锏特性，它能大大减少在消息处理的代码量，代码只要专注于实际算法的实现即可，将相应消息的解析和内容提取，交给模式匹配来完成。&lt;/p&gt;
&lt;p&gt;从本质上来讲，模式匹配体现的是一个解构的过程和手段，解构是日常编程过程中一个非常常见的场景，比如编译器将程序代码解析为一个抽象语法树（AST）就是一个解构的过程，再比如，将XML/JSON进行反序列化为程序对象也是一例。对于许多语言，并未提供强大的模式匹配特性，但是为了提供可扩展的解构功能，一般都会采取一些设计模式来解决。比如面向对象编程里，将解析操作抽离出独立的模块，采取基于基类的虚方法/抽象方法扩展的方式，然后结合想对应的规则配置，来完成有区别性的模式解构。但是，这样的方式，稍显笨重，代码量也更多，与模式匹配相比，不在一个复杂度等级之上。&lt;/p&gt;
&lt;p&gt;去年我用golang写了一个web框架，其中的路由解析过程就采取了类似的方式（代码位置：&lt;a href=&quot;https://github.com/JustinHuang917/gof&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/JustinHuang917/gof&lt;/a&gt;）。通过如以下路由规则配置，匹配不同的URL模式，从URL中提取相应的参数：&lt;/p&gt;
&lt;p&gt;``` xml&lt;br&gt;“RouteRules”:[&lt;br&gt;      {&lt;br&gt;          “/Order/{id:[0-9]+}”:&lt;br&gt;              {“controller”:”Order”,”action”:”Order”,”id”:”0”}&lt;br&gt;      },&lt;br&gt;      {&lt;br&gt;          “/{controller}/{action}”:&lt;br&gt;              {“controller”:”Home”,”action”:”Index”}&lt;br&gt;      }&lt;br&gt;  ]&lt;br&gt;```&lt;/p&gt;
&lt;p&gt;这个看似简单功能，我花了200多行代码才得以完成，使用的还是堪称语法最为精简的Golang，而如果使用Java/C#来完成，代码量肯定还要增加不少。而如果语言本身具有强大的模式匹配的话，实现代码将会变得非常精简。而这一次C#6.0声称引入模式匹配，希望是面向对象语言领域的一次有益尝试。&lt;/p&gt;
&lt;p&gt;同时，我也希望我喜欢的Golang在模式匹配上迈开尝试的脚步，在现有的goroutine+channel的组合上应用模式匹配，将是一件非常有效率的实践。现在Golang提供”select..case…“机制只能识别不同channel返回的消息，而不能识别实际消息的内容，这一点来说，与erlang相比，降低了CSP的编程效率。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;模式匹配是来自函数式编程领域的高效的编程功能特性，它能成倍增加“解构”代码的编写效率，明显降低代码复杂度。同时，尽管大多数的编程语言，尚未提供这一功能，但是实际代码编写过程中，我们可以借鉴其基于模式声明的思想，抽离出相应的模式匹配模块，在保证可扩展性的同时，控制数据（信息）匹配带来的代码复杂度。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几天看到篇C#6.0的draft spec，发现C#6.0里将惊现模式匹配。如是便在做了翻宣讲说“模式匹配”是一个很好用的特性，但是不知道跟C#的结合会怎么样。而同时却又发现周边了解“模式匹配”的人好少，于是诞生了写一篇文章稍微介绍下这一功能特性的想法。&lt;/p&gt;
&lt;p&gt;如
    
    </summary>
    
    
      <category term="基础知识" scheme="http://sharecore.net/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="模式匹配" scheme="http://sharecore.net/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>字符编码常识及问题解析</title>
    <link href="http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    <id>http://sharecore.net/2014/08/10/字符编码常识及问题解析/</id>
    <published>2014-08-10T15:53:04.000Z</published>
    <updated>2016-06-20T13:13:03.000Z</updated>
    
    <content type="html">&lt;p&gt;在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的知识已经掌握的足够了，可以忽略这篇文字。但如果你没法很好的回答我上面的面试题，或经常被乱码的问题所困扰，还是不妨一读。&lt;/p&gt;
&lt;h2 id=&quot;基本常识&quot;&gt;基本常识&lt;/h2&gt;&lt;h3 id=&quot;1-位和字节&quot;&gt;1.位和字节&lt;/h3&gt;&lt;p&gt;说起编码，我们必须从最基础的说起，&lt;strong&gt;位和字节&lt;/strong&gt;(别觉得这个过于简单不值一说，我还真见过很多个不能区分这两者的程序员)。位（bit）是指计算机里存放的二进制值(0/1)，而8个位组合成的“位串”称为一个字节，容易算出，8个位的组合有256（ 2^8 ）个组合方式，其取值范围是“00000000-11111111”，常用十六进制来表示。比如“01000001”就是一个字节，其对应的十六进制值为“0x41”。&lt;/p&gt;
&lt;p&gt;而我们通常所讲的字符编码，就是指&lt;strong&gt;定义一套规则&lt;/strong&gt;，将真实世界里的字母/字符与计算机的二进制序列进行相互转化。如我们可以针对上面的字节定义如下的转换规则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;01000001&lt;/span&gt;（&lt;span class=&quot;number&quot;&gt;0x41&lt;/span&gt;）&amp;lt;-&amp;gt; &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt; &amp;lt;-&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即用字位序“01000001”来表示字母’A’。&lt;/p&gt;
&lt;h3 id=&quot;2-拉丁字符&quot;&gt;2.拉丁字符&lt;/h3&gt;&lt;p&gt;拉丁字符是当今世界使用最广泛的符号了。通常我们说的拉丁字母，指的的是&lt;strong&gt;基础拉丁字母&lt;/strong&gt;,即指常见的”ABCD“等26个英文字母，这些字母与英语中一些常见的符号（如数字，标点符号）称为&lt;strong&gt;基础拉丁字符&lt;/strong&gt;，这些基础拉丁字符在使用英语的国家广为流行，当然在中国，也被用来当作汉语拼音使用。在欧洲其它一些非英语国家，为满足其语言需要，在基础拉丁字符的基础上，加上一些连字符，变音字符(如’Á’)，形成了&lt;strong&gt;派生拉丁字母&lt;/strong&gt;，其表示的字符范围在各种语言有所不同，而&lt;strong&gt;完整意义上的拉丁字符是指这些变体字符与基础拉丁字符的全集&lt;/strong&gt;。是比基础拉丁字符集大很多的一个集合。&lt;/p&gt;
&lt;h2 id=&quot;编码标准&quot;&gt;编码标准&lt;/h2&gt;&lt;p&gt;前文提到，字符编码是一套规则。既然是规则，就必须有标准。下面我就仔细说说常见的字符编码标准。&lt;/p&gt;
&lt;h3 id=&quot;1-拉丁编码&quot;&gt;1.拉丁编码&lt;/h3&gt;&lt;p&gt;ASCII的全称是American Standard Code for Information Interchange（美国信息交换标准代码）。顾名思义，这是现代计算机的发明国美国人设计的标准，而美国是一个英语国家，他们设定的&lt;strong&gt;ASCII编码也只支持基础拉丁字符&lt;/strong&gt;。ASCII的设计也很简单，&lt;strong&gt;用一个字节（8个位）来表示一个字符，并保证最高位的取值永远为’0’&lt;/strong&gt;。即表示字符含义的位数为7位，不难算出其可表达字符数为2^7 =128个。这128个字符包括95个可打印的字符（涵盖了26个英文字母的大小写以及英文标点符号能）与33个控制字符（不可打印字符）。例如下表，就是几个简单的规则对应：&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;字符类型&lt;/th&gt;&lt;th&gt;   字符&lt;/th&gt;&lt;th&gt;二进制  &lt;/th&gt;&lt;th&gt; 16进制&lt;/th&gt;&lt;th&gt;10进制&lt;/th&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;可打印字符&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;  01000001&lt;/td&gt;&lt;td&gt;   0x41&lt;/td&gt;&lt;td&gt;65&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;可打印字符&lt;/td&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;  01100001&lt;/td&gt;&lt;td&gt;   0x61&lt;/td&gt;&lt;td&gt;97&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;控制字符&lt;/td&gt;&lt;td&gt;   \r&lt;/td&gt;&lt;td&gt;00001101&lt;/td&gt;&lt;td&gt;    0x0D&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;控制字符&lt;/td&gt;&lt;td&gt;   \n&lt;/td&gt;&lt;td&gt;00001010&lt;/td&gt;&lt;td&gt;    0xA&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;前面说到了，ASCII是美国人设计的，只能支持基础拉丁字符，而当计算机发展到欧洲，欧洲其它不只是用的基础拉丁字符的国家（即用更大的派生拉丁字符集）该怎么办呢？&lt;/p&gt;
&lt;p&gt;当然，最简单的办法就是将美国人没有用到的&lt;strong&gt;第8位也用上&lt;/strong&gt;就好了，这样能表达的字符个数就达到了2^8 =256个，相比较原来，增长了一倍， 这个编码规则也常被称为&lt;strong&gt;EASCII&lt;/strong&gt;。EASCII基本解决了整个西欧的字符编码问题。但是对于欧洲其它地方如北欧，东欧地区，256个字符还是不够用，如是出现了&lt;strong&gt;ISO 8859&lt;/strong&gt;,为解决256个字符不够用的问题，&lt;strong&gt;ISO 8859采取的不再是单个独立的编码规则，而是由一系列的字符集（共15个）所组成&lt;/strong&gt;，分别称为ISO 8859-n(n=1,2,3…11,13…16,没有12)。其每个字符集对应不同的语言,如ISO 8859-1对应西欧语言，ISO 8859-2对应中欧语言等。其中大家所熟悉的&lt;strong&gt;Latin-1就是ISO 8859-1的别名,它表示整个西欧的字符集范围&lt;/strong&gt;。&lt;br&gt;&lt;strong&gt;需要注意的一点的是，ISO 8859-n与ASCII是兼容的，即其0000000(0x00)-01111111(0x7f)范围段与ASCII保持一致，而10000000（0x80）-11111111(0xFF)范围段被扩展用到不同的字符集。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-中文编码&quot;&gt;2.中文编码&lt;/h3&gt;&lt;p&gt;以上我们接触到的拉丁编码，都是单字节编码，即用一个字节来对应一个字符。但这一规则对于其它字符集更大的语言来说，并不适应，比如中文，而是出现了用多个字节表示一个字符的编码规则。常见的中文GB2312（国家简体中文字符集）就是用两个字节来表示一个汉字（注意是表示一个汉字，对于拉丁字母，GB2312还是是用一个字节来表示以兼容ASCII）。我们用下表来说明各中文编码之间的规则和兼容性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/codes/cn_codes.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于中文编码，其规则实现上是很简单的，一般都是简单的&lt;strong&gt;字符查表&lt;/strong&gt;即可，重要的是要注意其相互之间的&lt;strong&gt;兼容性&lt;/strong&gt;问题。如如果选择BIG5字符集编码，就不能很好的兼容GB2312，当做繁转简时有可能导致个别字的冲突与不一致，但是GBK与GB2312之间就不存在这样的问题。&lt;/p&gt;
&lt;h3 id=&quot;3-Unicode&quot;&gt;3.Unicode&lt;/h3&gt;&lt;p&gt;以上可以看到，针对不同的语言采用不同的编码，有可能导致冲突与不兼容性，如果我们打开一份字节序文件，如果不知道其编码规则，就无法正确解析其语义，这也是产生乱码的根本原因。有没有一种规则是全世界字符统一的呢？当然有，Unicode就是一种。为了能独立表示世界上所有的字符，Unicode采用&lt;strong&gt;4个字节表示一个字符&lt;/strong&gt;,这样理论上Unicode能表示的字符数就达到了2^31 = 2147483648 = 21 亿左右个字符，完全可以涵盖世界上一切语言所用的符号。我们以汉字”微信“两字举例说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;微 &amp;lt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;\u5fae&lt;/span&gt;   &amp;lt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;01011111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10101110&lt;/span&gt;
信 &amp;lt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;\u4fe1&lt;/span&gt;   &amp;lt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;01001111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11100001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;容易从上面的例子里看出，Unicode对所有的字符编码均需要四个字节，而这对于拉丁字母或汉字来说是浪费的，其前面三个或两个字节均是0,这对信息存储来说是极大的浪费。另外一个问题就是，如何区分Unicode与其它编码这也是一个问题，比如计算机怎么知道四个字节表示一个Unicode中的字符，还是分别表示四个ASCII的字符呢？&lt;/p&gt;
&lt;p&gt;以上两个问题，困扰着Unicode，让Unicode的推广上一直面临着困难。直至UTF-8作为Unicode的一种实现后，部分问题得到解决，才得以完成推广使用。说到此，我们可以回答文章一开始提出的问题了，&lt;strong&gt;UTF-8是Unicode的一种实现方式，而Unicode是一个统一标准规范，Unicode的实现方式除了UTF-8还有其它的，比如UTF-16等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;话说当初大牛Ben Thomson吃饭时，在一张餐巾纸上，设计出了UTF-8，然后回到房间，实现了第一版的UTF-8。关于UTF-8的基本规则，其实简单来说就两条（来自阮一峰老师的总结）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;规则1：对于单字节字符，字节的第一位为0，后7位为这个符号的Unicode码，所以对于拉丁字母，UTF-8与ASCII码是一致的。

规则2：对于&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;字节(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;&amp;gt;1)的字符，第一个字节前&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;位都设为1，第&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;+1位为0，后面字节的前两位一律设为10，
剩下没有提及的位，全部为这个符号的Unicode编码。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过，根据以上规则，可以建立一个Unicode取值范围与UTF-8字节序表示的对应关系，如下表，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/codes/utf8.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;举例来说，’微’的Unicode是’\u5fae’，二进制表示是”00000000 00000000 01011111 10101110“，其取值就位于’0000 0800-0000 FFFF’之间，所以其UTF-8编码为’&lt;strong&gt;111&lt;/strong&gt;00101 &lt;strong&gt;10&lt;/strong&gt;111110 &lt;strong&gt;10&lt;/strong&gt;101110’ （加粗部分为固定编码内容）。&lt;/p&gt;
&lt;p&gt;通过以上简单规则，UTF-8采取变字节的方式，解决了我们前文提到的关于Unicode的两大问题。同时，作为中文使用者需要注意的一点是&lt;strong&gt;Unicode(UTF-8)与GBK，GB2312这些汉字编码规则是完全不兼容的，也就是说这两者之间不能通过任何算法来进行转换,如需转换，一般通过GBK查表的方式来进行&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;常见问题及解答&quot;&gt;常见问题及解答&lt;/h2&gt;&lt;h3 id=&quot;1-windows_Notepad中的编码ANSI保存选项，代表什么含义？&quot;&gt;1.windows Notepad中的编码ANSI保存选项，代表什么含义？&lt;/h3&gt;&lt;p&gt;ANSI是windows的默认的编码方式，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。所以，&lt;strong&gt;如果将一个UTF-8编码的文件，另存为ANSI的方式，对于中文部分会产生乱码&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-什么是UTF-8的BOM？&quot;&gt;2.什么是UTF-8的BOM？&lt;/h3&gt;&lt;p&gt;BOM的全称是Byte Order Mark，BOM是微软给UTF-8编码加上的，用于标识文件使用的是UTF-8编码，即在UTF-8编码的文件起始位置，加入三个字节“EE BB BF”。这是微软特有的，标准并不推荐包含BOM的方式。采用加BOM的UTF-8编码文件，对于一些只支持标准UTF-8编码的环境，可能导致问题。比如，在Go语言编程中，对于包含BOM的代码文件，会导致编译出错。详细可见我的&lt;a href=&quot;http://sharecore.info/blog/2013/04/05/parse-csv-to-sql-for-insert/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;3-为什么数据库Latin1字符集（单字节）可以存储中文呢？&quot;&gt;3.为什么数据库Latin1字符集（单字节）可以存储中文呢？&lt;/h3&gt;&lt;p&gt;其实不管需要使用几个字节来表示一个字符，但最小的存储单位都是字节,所以，&lt;strong&gt;只要能保证传输和存储的字节顺序不会乱即可&lt;/strong&gt;。作为数据库，只是作为存储的使用的话，只要能保证存储的顺序与写入的顺序一致，然后再按相同的字节顺序读出即可，翻译成语义字符的任务交给应用程序。比如’微’的UTF-8编码是’0xE5 0xBE 0xAE’，那数据库也存储’0xE5 0xBE 0xAE’三个字节，其它应用按顺序从数据库读取，再按UTF-8编码进行展现。这当然是一个看似完美的方案，但是只要写入，存储，读取过程中岔出任何别的编码，都可能导致乱码。&lt;/p&gt;
&lt;h3 id=&quot;4-Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？&quot;&gt;4.Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/codes/mysql_var.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们分别解释：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;character_set_client&lt;/strong&gt;：客户端来源的数据使用的字符集，用于客户端显式告诉客户端所发送的语句中的的字符编码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;character_set_connection&lt;/strong&gt;：连接层的字符编码，mysql一般用character_set_connection将客户端的字符转换为连接层表示的字符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;character_set_results&lt;/strong&gt;:查询结果从数据库读出后，将转换为character_set_results返回给前端。&lt;/p&gt;
&lt;p&gt;而我们常见的解决乱码问题的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;SET NAMES GBK&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其相当于将以上三个字符集统一全部设置为GBK，这三者一致时，一般就解决了乱码问题。&lt;/p&gt;
&lt;p&gt;character_set_database:当前选中数据库的默认字符集，如当create table时没有指定字符集，将默认选择该字符集。&lt;/p&gt;
&lt;p&gt;character_set_database已经character_set_system，一般用于数据库系统内部的一些字符编码，处理数据乱码问题时，我们基本可以忽略。&lt;/p&gt;
&lt;h3 id=&quot;5-什么情况下，表示信息丢失？&quot;&gt;5.什么情况下，表示信息丢失？&lt;/h3&gt;&lt;p&gt;对于mysql数据库，我们可以通过&lt;strong&gt;hex(colname)&lt;/strong&gt;函数（其它数据库也有类似的函数，一些文本文件编辑器也具有这个功能），查看实际存储的字节内容，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/codes/mysql_hex.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过查看存储的字节序，我们可以从根本上了解存储的内容是什么编码了。而当发现&lt;strong&gt;存储的内容全部是’3F’时，就表明存储的内容由于编码问题，信息已经丢失了，无法再找回&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;之所以出现这种信息丢失的情况，一般是将不能相互转换的字符集之间做了转换，比如我们在前文说到，UTF-8只能一个个字节地变成Latin-1，但是根本不能转换的，因为两者之间没有转换规则，Unicode的字符对应范围也根本不在Latin-1范围内，所以只能用’?(0x3F)’代替了。&lt;/p&gt;
&lt;h2 id=&quot;总结：&quot;&gt;总结：&lt;/h2&gt;&lt;p&gt;本文从基础知识与实际中碰到的问题上，解析了字符编码相关内容。而之所以要从头介绍字符编码的基础知识，是为了更好的从原理上了解与解决日常碰到的编码问题，只有从根本上了解了不同字符集的规则及其之间的关系与兼容性，才能更好的解决碰到的乱码问题，也能避免由于程序中不正确的编码转换导致的信息丢失问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的知识已经掌握的足够了，可以忽略这篇
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术常识" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>浅谈服务化架构</title>
    <link href="http://sharecore.net/2014/08/02/%E6%B5%85%E8%B0%88%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/"/>
    <id>http://sharecore.net/2014/08/02/浅谈服务化架构/</id>
    <published>2014-08-02T15:54:42.000Z</published>
    <updated>2016-06-20T13:11:25.000Z</updated>
    
    <content type="html">&lt;p&gt;这两年来，在服务化架构设计上的实践比较多，在此对关于服务化设计一些经验稍作总结，知识经验水平有限，如有欠缺和不准确的地方，还请指出修正！     &lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;http://sharecore.net/2014/07/05/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《可扩展架构设计的三个维度》&lt;/a&gt;一文里，谈到服务化架构（SOA）在保证系统扩展性上，是一个比较好的架构设计实践。也谈到了通过服务网关的形式来进行多服务的注册与管理等。但困于篇幅，并未展开讲关于服务化架构实现层面上的具体细节。本文就结合我这两年来，在服务化架构设计上的一些实践经验，谈谈一个服务化框架其应该具备的一些功能以及其基本实现方式。&lt;/p&gt;
&lt;p&gt;这里说到的“服务”，本质上来说，就是指“RPC”。单纯的RPC功能实现，其实很简单，无非就是client发起调用，中间某个组件（甚至就是client本身）拦截调用信息，序列化后将信息传输到server端，server端收到调用请求后反序列化，根据请求详细发起实际调用后返回响应传输回给client端。这样的RPC很常见，比如常见的存储过程调用就是一例。但是在一个复杂的业务环境，如何管理和协同这些大量的RPC才是最麻烦的事情。所以，在此谈的“服务化”更多指的是对RPC的管理。&lt;/p&gt;
&lt;p&gt;一个复杂业务环境下的大量RPC究竟会遇到哪些问题呢？换句话说，一个服务化管理框架究竟应该具备哪些功能特性才算基本完备呢？以下是我的一些看法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.协议选型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据序列化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为整个环境里的服务采用统一的数据序列化协议，其益处是显而易见的，能大大降低服务提供者和服务调用者之间的沟通成本，同时也可以为服务提供者减少应对不同数据协议需求而带来的代码复杂性。所以，在开始设计一个服务化框架时，第一件重要的事情就是选定一个标准的数据序列化协议。如何选择合适的序列化协议重点需要从&lt;strong&gt;扩展性，传输性能以及业界通用性（换句话说就是不同技术/语言的支持程度）&lt;/strong&gt;三个因素里来协调选择。当前看来，在这三个方面都做的比较好，也是使用最广泛的就是&lt;strong&gt;Json&lt;/strong&gt;和&lt;strong&gt;Protobuf&lt;/strong&gt;了，基于文本的Json在可读性和灵活性上占优，而基于二进制的Protobuf在传输性能生更胜一筹。而如果整个环境开发的技术栈比较统一，比如全是Java/.NET，也可以选择对这一技术更加友好的序列化协议。我这一次选择的就是Json，因为从面对的业务情况来看，传输性能不是根本矛盾，而灵活性要求较高，同时服务使用者使用的技术也较为多样化。&lt;/p&gt;
&lt;p&gt;在序列化协议的选定上&lt;strong&gt;要避免的一个误区就是采用自定义协议而不是业界通用协议&lt;/strong&gt;,自定义协议将很容易面临扩展性和使用推广方面的问题，同时，当有新的开发人员加入进来，其需要花费时间来学习与了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通讯协议选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通讯协议上的选择上灵活性比较大，有多种选择，可以在基于HTTP或TCP链接上建立自己的通讯协议。比如可以设计一个简单的header（定长）+body（序列化的请求/响应）。如果采取json作序列化协议的情况下，可以跟我本次的选择一样，采取一个类似&lt;a href=&quot;http://en.wikipedia.org/wiki/JSON-RPC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;json-rpc&lt;/a&gt;, 完全基于json的通讯协议：&lt;/p&gt;
&lt;p&gt;Resust:&lt;br&gt;``` json&lt;br&gt;{&lt;br&gt;    “ActionName”:”Do”,&lt;br&gt;    “AppId”:”xxxxxx”,&lt;br&gt;    “RequestContent”:{}&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Response:&lt;br&gt;``` json&lt;br&gt;{&lt;br&gt;    “RequestId”:“xxxxxxxxx”，&lt;br&gt;    “HasError”:false,&lt;br&gt;    “ResponseContent”:{}&lt;br&gt;}&lt;br&gt;```&lt;/p&gt;
&lt;p&gt;对于服务访问对象主要为企业内部的情况，不太建议采取与http完全绑定的restful协议，这将牺牲链接层选择的灵活性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.注册与授权管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册管理是解决系统交互复杂性的必备良药，我建议超过三个系统之间的系统交互，都应该具备注册管理功能。对于服务化架构来说，注册管理也是最为核心的一项功能。当服务数量和服务使用者数量爆发性增长时，最难回答的问题就是“服务被谁使用了？”以及“有哪些服务可供使用？”，注册管理就是解决这两个问题的最佳方式与实践。 &lt;/p&gt;
&lt;p&gt;注册管理的实现上其实也很简单，提供一个Config Server（配置中心），收集服务提供者的注册信息（包括服务名称，服务地址（可以多个），版本，超时时间控制等），我们称为&lt;strong&gt;服务的元信息&lt;/strong&gt;。而当服务使用者需要调用相应的服务时，就可以利用这些元信息来查找和调用相应的服务了。&lt;/p&gt;
&lt;p&gt;不过，在元信息的使用上，存在两者架构方式&lt;/p&gt;
&lt;p&gt;1.服务使用者访问统一的服务中转器，由服务中转器按照注册信息以及负载情况将请求转发到相应的服务地址上。服务执行后，响应信息返回到服务中心，服务中心将响应回送给调用方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa/service_2.png&quot; alt=&quot;service_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种方式的优点是能比较好的控制所有请求的调度。当服务元信息发生变化时，能及时地调整请求转发（负载）与超时控制等。缺点是请求和响应均需要由中转中心负责转发，性能耗费较大。同时，中转中心的可用性也容易产生问题，必须通过集群的方式来解决。&lt;/p&gt;
&lt;p&gt;2.服务使用者负责从配置中心获取服务地址等信息，然后有由服务使用者直接向相对应地址上的服务发送请求，请求也直接由服务提供者返回给服务调用者。同时，服务使用者本身可以缓存一定的服务元信息，防止每次访问都要从配置中心获取，以降低配置中心的负载，增强整个系统的可用性。当配置中心的服务元信息发生变化时，通过通知的方式告知服务使用者更新本地缓存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa/service_1.png&quot; alt=&quot;service_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种架构方式与第一种架构相比，能显著降低性能的损耗，以及服务使用者对中心节点的直接依赖。但代价是需要彻底改造服务使用者的调用方式，框架的代码必须侵入到客户端的开发中去。一般会针对不同的客户端提供clientLib，但当客户端实现方式多样化时，这种代价是非常大的。&lt;/p&gt;
&lt;p&gt;由于我这次面对的客户端多样性，客户端开发也不在控制范围内，所以选择就是第一种方式。&lt;/p&gt;
&lt;p&gt;关于授权，可以与注册管理相互结合，将授权信息同一保存到配置中心。对于企业内部访问的服务，做到通过IP+AppId授权应该就够了。这里有个经验是可以将授权和服务版本确认两者结合起来，即在&lt;strong&gt;授权的同时完成服务版本的确定&lt;/strong&gt;，而不采取由客户端发起访问时指定版本的方式，这样做的好处是框架和服务提供者对于服务版本变更和灰度发布具有更高的可控制性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.路由与过载保护&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://sharecore.net/blog/2014/07/05/ke-kuo-zhan-jia-gou-de-san-ge-wei-du/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《可扩展架构设计的三个维度》&lt;/a&gt;一文里谈到通过单元化架构以满足Z轴扩展，以满足差异性的需求或者做到安全隔离。而&lt;strong&gt;服务路由是实现这种单元化架构的基本保障&lt;/strong&gt;，以保证能将来自不同访问者请求或者不同的请求内容，分发到不同的服务提供区域去，形成单元化架构的闭环。当然，路由功能并不一定需要框架来独立实现，业界许多通用的（软）负载均衡器可以协助实现，如Nginx/HAProxy/LVS这些。但是这类通用的负载均衡软件的问题是路由算法比较通用，当需要扩展到与业务逻辑相关的路由绑定时，比较麻烦，比如需要用户ID按权重分配路由。在此建议，&lt;strong&gt;可以采取通用的负载均衡软件当第一层接入，而在服务节点之间采取自己实现路由模块的方式。&lt;/strong&gt;而在实现路由模块时，需要将扩展性上的考虑放在第一位。 &lt;/p&gt;
&lt;p&gt;对于服务化架构，保障提供服务提供者的业务系统不受“恶意”调用或突发性激增调用的破坏，过载保护功能至关重要，它能起到系统“保险丝”的效果。前文提到可用于接入的Nginx/HAProxy/LVS这些软件，也多少提供了过载保护的功能。如果自己实现过载保护模块，具体可参见我的&lt;a href=&quot;http://sharecore.net/blog/2014/06/21/guo-zai-bao-hu-suan-fa-qian-xi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《过载保护算法浅析》&lt;/a&gt;一文。对于过载保护的一个经验是：&lt;strong&gt;过载保护越靠近服务访问前端越好。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.服务拆分与组合化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的SOA概念，指的是不同的应用系统之间相互通过大粒度服务的方式进行集成。而当今的服务化架构已经摆脱了这一概念的束缚，更多讲的是系统内部模块级甚至是功能级的服务化模式。也就是说服务实现的粒度更小了。这当然为应用和服务的实现带来了更强的灵活性，服务交付周期也大大缩短了。但这样的细粒度拆分服务，带来的问题是项功能的实现需要访问的服务数量成倍的增加。如下图所示：一个客户下订单的功能实现需要分别访问：客户信息服务，产品类别服务，库存服务，订单管理服务等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa/service_3.png&quot; alt=&quot;service_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;这将显著增加功能实现的复杂性。为了解决这一问题，我们只能再次使用那条永远有效的“中间层定律”：&lt;strong&gt;任何计算机问题都可以通过中间加一层来解决。&lt;/strong&gt; 我们可以将相应的服务组合成一个新的服务提供出去，比如上面的例子，我们可以按以下方式组合：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa/service_4.png&quot; alt=&quot;service_4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.基于配置的服务运行时提供&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前文已经概述了一个服务化框架应该具有的一些基本功能以及一些基本的架构实现方式。但这个服务框架究竟如何与业务开发相结合呢？也就是说业务逻辑代码与框架代码之间如何隔离,而不是让框架的功能代码侵入到业务逻辑代码的开发中来?这里通用的做法就是&lt;strong&gt;通过基于配置，由框架提供运行时，动态加载业务代码的方式&lt;/strong&gt;。做到这点，只需要约束业务逻辑代码实现相应的接口/基类，然后打包成相应的组件（如jar/dll/so等）提供给框架加载运行即可，类似于java servlet的开发，业务开发完全不用关心服务化框架任何功能，专注开发业务逻辑即可。同时，对于既有代码的服务化也将变得简单，只需要稍加重构封装出实现相应的接口即可。&lt;/p&gt;
&lt;p&gt;配置类似于：&lt;/p&gt;
&lt;p&gt;```xml&lt;br&gt; &lt;service servicename=&quot;Customer.GetCustomer&quot;&gt;&lt;br&gt;    &lt;biz imp=&quot;com.customer.getCustomer&quot;&gt;&lt;br&gt;    &lt;biz&gt;&lt;br&gt; &lt;service&gt;&lt;br&gt;```&lt;/service&gt;&lt;/biz&gt;&lt;/biz&gt;&lt;/service&gt;&lt;/p&gt;
&lt;p&gt;同时，这种基于组件配置的服务实现，对于组合组件实现服务也非常简单。只需要将上面的配置改为嵌套的方式既可以实现组合。比如对于订单生成服务只要组合如下：&lt;/p&gt;
&lt;p&gt;```xml&lt;br&gt; &lt;service servicename=&quot;Order.CreateOrder&quot;&gt;&lt;br&gt;    &lt;biz imp=&quot;com.inventory.checkInventory&quot;&gt;&lt;br&gt;        &lt;biz imp=&quot;com.order.createOrder&quot;&gt;&lt;br&gt;            &lt;biz imp=&quot;com.inventory.updateInventory&quot;&gt;&lt;br&gt;            &lt;/biz&gt;&lt;br&gt;        &lt;/biz&gt;&lt;br&gt;    &lt;biz&gt;&lt;br&gt; &lt;service&gt;&lt;br&gt;```&lt;/service&gt;&lt;/biz&gt;&lt;/biz&gt;&lt;/service&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本来看，服务化架构已经在业界完成了落地，尤其是互联网公司，更是基于这一架构的领先者，有许多经验值得借鉴。当然，这个落地的服务化架构，与当年被各大商业公司用WS-*和ESB玩坏的SOA概念相去甚远。也再一次证明，那些被鼓吹出来的技术概念，只有当那些商业公司不再炒作之时，方是其真正落地之日（SOA如此，当今热炒的“大数据”，“云计算”这些概念又何尝不会是如此呢？）。在技术被鼓吹得风头正劲时，千万要保持冷静，别被那些商业公司所忽悠,你完全可以自己实现更轻量级更具有扩展性的架构。不信的话，可以去问问，那些当年花大价钱去买SOA商业组件的公司，他们还好吗？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这两年来，在服务化架构设计上的实践比较多，在此对关于服务化设计一些经验稍作总结，知识经验水平有限，如有欠缺和不准确的地方，还请指出修正！     &lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;http://sharecore.net/2014/07/05/%E5%8F%AF%E6%
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务化" scheme="http://sharecore.net/tags/%E6%9C%8D%E5%8A%A1%E5%8C%96/"/>
    
      <category term="架构" scheme="http://sharecore.net/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>面对喷子明哲保身</title>
    <link href="http://sharecore.net/2014/07/27/%E9%9D%A2%E5%AF%B9%E5%96%B7%E5%AD%90%E6%98%8E%E5%93%B2%E4%BF%9D%E8%BA%AB/"/>
    <id>http://sharecore.net/2014/07/27/面对喷子明哲保身/</id>
    <published>2014-07-27T15:57:23.000Z</published>
    <updated>2016-06-20T13:11:55.000Z</updated>
    
    <content type="html">&lt;p&gt;本打算本周继续写关于技术的话题，但是今天碰到一件闲事，让我改了想法！我得写一篇“教化”的文字，你们暂且读读，个人牢骚，慎重评论！&lt;/p&gt;
&lt;p&gt;先从今天这件“闲事”说起：&lt;/p&gt;
&lt;p&gt;最近，我在玩一个群聊App，可以让附近的人加入到同一感兴趣的话题的群里，一起聊想法和观点！我建了一个叫“哲学家”的群，写了句介绍大概意思是说“这里不欢迎思考懒惰者”。本来是无意之举，没想到，还真吸引了小小几十个人的加入。我懒得打理，群里也一向平静如常。而今天，一人在群里发了一个很大的话题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;你们对王阳明的心学怎么看？
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这话题大的根本无从聊起，而我又觉得难得有人发起讨论，不想因为话题太大无从讨论而冷掉，于是准备将话题缩小到王阳明的“知行合一”的观点上来。于是隐晦的回复了一个类比：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;妓女可以谈贞操，因为是过来人，能懂得有和没有的区别;而处女不能谈性技，处女啥都不会，谈什么性技，她连谈贞操的资格也没有！
——喷下“理学”而已，别戴帽子！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我本以为，问问题者如果懂得王阳明的知行合一学说，懂得其对程朱理学者“灭人欲”的批判的话，应该能看懂我回答此话的类比之意！而没想到，可能是我回答的太晦涩，还是类比的太悬浮，其给出的回话完全出于我所料，其答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;群主真是好牛逼啊，从贞操谈到性技谈到理学？敢问何为理学？理学和性技有何相关？
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种断章取义的回应真是“如雷贯耳”，也似曾熟悉，网络上到处充斥着这种牛头不对马嘴的讨论！我一时无法答上话！沉默良久后，我回答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一，你问的王阳明，所以我将王阳明的知行合一说作个类比，表示我赞成它关于知行合一的学说以及其对程朱理学的虚伪理论的批判;

第二，贞操和性技之事，是程朱理学最为避讳而自己却无法做到之事，用其“讽”理学，并无不妥！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而后，又有另外一个人回答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;读过几本破书，就敢对理学大放厥词，装什么逼啊！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到这样的回答，我嘴里的水直接喷了出来，这么快就人身攻击了，完全出乎我意料！我赶紧停止了讨论！&lt;/p&gt;
&lt;p&gt;闲事至此，我悲从中来，这些人的嘴脸如此熟悉！在国内的网络上，总有一大群人，根本不理解提出观点者其本身的意思，就&lt;strong&gt;断章取义对观点提出者，以其当时心情为标杆，随意对观点提出者进行毫无原则的人身攻击&lt;/strong&gt;。他们不知道，说出的每句话背后是需要深刻思考的，他们的头脑或许根本不能支持其去思考！他们只是需要一个情绪排泄的通道，就像排泄物在肚子里需要排出来一样，他们脑子里的排泄物也必须要排出来。&lt;/p&gt;
&lt;p&gt;要进行一场正常的观点交碰，是如此的困难！任何观点，只要稍微“左一点”或“右一点”，哪怕是完全的”中立“观点，必将有人以一副“你敢再说？老子弄死你”的流氓嘴脸出现！他们不去思考给出的观点的本质是什么，或者其根本就不具有辨识观点本质的认知能力，可他们有着满腔“鸡血”，非让你进入”地狱“永不翻身才满意！&lt;strong&gt;他们可以满嘴的”自由“，但是他们不能给你发表观点的”自由“;他们可以满怀”善良与人性“，却可以将你全家老小问候一个遍&lt;/strong&gt;。对于这类人，我们已经不能称其为”愤青“了，因为”愤青“们反的只是保守言行，而这类人，不管左中右，逮着就喷，无观念，无廉耻，无底线地！用网络上的名词，暂且称其为”喷子“。&lt;/p&gt;
&lt;p&gt;我想，如果杀人不犯法的话，他们肯定把你找出来立马弄死！在这样的一个环境里，你需要吃了雄心豹子胆才敢”挑事“，没那承受力的话，就最好明哲保身少说话，或者与这群人为伍，让”伟大的群体“给予你安全保护。为了安宁的生存，你就得放弃你的自由。这就好像鲁迅先生的形象描述：&lt;strong&gt;既然猴子可以变人，为什么现在的猴子不想变人呢？并非都不想变人，也有少数猴子想变人，它们曾经两条腿站起来，学人走路并且说它们想做人。然而它们的同类不允许，说它违背了猴子的本性，把它们咬死了！&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有时候，我还想左一点的认为，咱们就别搞义务教育了！让那么多喷子学会的文字，却只能被他们用来行这些对社会进步有害而无益之事，到底有何意义呢？还不如让这些人根本不识字不会写字，他们就没法喷了！我甚至违心的去认为，”洗脑”是对的，因为&lt;strong&gt;对于满脑子都是排泄物的人，洗脑或许有益健康&lt;/strong&gt;，至少能让他们有原则的守护其观点吧！但回头想想，这样或许是违背子自由教育或自由意志的，我不能这样持双重观点，否则，我不也跟”喷子“无异了吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人立身？以为何？我想最起码就是独立思考之能力以及统一与一致的价值观！&lt;/strong&gt;而这些”喷子“们，最为缺少的就是这两项基本的素质！这两项素质的缺乏，是无药可治的！因为能治其病的前提，是其必须先具有两项素质，这就成了一个”蛋生鸡鸡生蛋“的问题，不会有治疗方案了。所以，在此，对于这个现象，除了牢骚，我给不出任何根治良方！或许像我这样，碰到这类人，乖乖的躲起来，以免他们的排泄物脏到自己！听之任之，任其放肆与疯狂,就暂且是最好的办法了！&lt;/p&gt;
&lt;p&gt;这真是一个悲剧，意味着我们不会再有一个安宁之日了！明哲保身吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本打算本周继续写关于技术的话题，但是今天碰到一件闲事，让我改了想法！我得写一篇“教化”的文字，你们暂且读读，个人牢骚，慎重评论！&lt;/p&gt;
&lt;p&gt;先从今天这件“闲事”说起：&lt;/p&gt;
&lt;p&gt;最近，我在玩一个群聊App，可以让附近的人加入到同一感兴趣的话题的群里，一起聊想法和观点
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>技术的进化</title>
    <link href="http://sharecore.net/2014/07/20/%E6%8A%80%E6%9C%AF%E7%9A%84%E8%BF%9B%E5%8C%96/"/>
    <id>http://sharecore.net/2014/07/20/技术的进化/</id>
    <published>2014-07-20T15:58:29.000Z</published>
    <updated>2016-06-20T13:12:01.000Z</updated>
    
    <content type="html">&lt;p&gt;前几日，吴军博士在微博上转发了王石为其新书《文明之光》写的序言。在序言里，王石提到了达尔文进化论在社会与技术的适应性问题。王石在他短短几句话里并未充分说明了他的观点，只是举了英文键盘的例子说明了&lt;strong&gt;存活下来的不一定更“好”，仅仅是更“适”而已&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我在微博上留下了一条评论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生物突变过程，并不一定是适合文明尤其是技术的进化的，好比如从帆船不可能突变到轮船，喷气机也不是内燃机或其它任何先前技术的变种，技术的进化更多是组合进化不太具有偶然性，而不是生物的单物种偶然性突变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用达尔文的理论去解释不同领域的演进,是许多人的偏好，尤其是国人。但是，无论觉得达尔文理论能如何为你切身地解答从哪而来的问题，将它放置于任何领域成为“大一统”的进化观点，我想是不合适的，至少将其置于技术的领域，是不完整的。尽管吴军博士回复说，《文明之光》一书并没有太谈进化论，我还是想把我的观点讲清楚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.不完整的进化论理解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;达尔文的生物进化理论需要从两个方面来理解：&lt;strong&gt;变异与选择&lt;/strong&gt;。由于某些历史与政治的原因，进化论被引进进入中国时，就被严复梁启超他们“阉割”了，只片面的强调了“选择”一含义，这也就是大多数人固有的“物竞天择，适者生存”的观点，而对其“变异”层面的含义却知之甚少。由于“进化就是选择”这一狭隘观点的影响，导致达尔文的理论被”泛滥“地解释所有的领域的发展，因为单从“选择”层面来看，其确实是适合其它领域的。当然，用来解释社会发展领域的发展，也是当初严复和梁启超他们原本目的。&lt;/p&gt;
&lt;p&gt;如果说“进化就是选择”，那前面王石先生举的英文键盘一例来说进化，也是合理的（其实这也就是常说的”路径依赖“）。但是这样的观点如果奉成为“理论”，肯定是不完整的。选择论回答不了被选择的“物件”从何而来的疑问。而完整的达尔文理论认为&lt;strong&gt;变异为选择提供了资源&lt;/strong&gt;。如果说”选择“解答了发展的问题，那”变异“则解答了起源的问题。在生物的进化上，这里的变异指的就是基因突变，并且是单个物种内的自身基因变化。&lt;/p&gt;
&lt;p&gt;正是这种关乎基因突变的观点，将达尔文理论套到技术领域，是根本站不住脚的。比如雷达诞生于半导体，你可以对20世纪30年代的半导体线圈进行任何你喜欢的改变，但是你永远不可能得到雷达，制造雷达需要一个和半导体完全不同的理念。我前文微博里提到的帆船到轮船，喷气机到内燃机的也同样如此，无论你对帆船如何改造，没有革命性发动机出现，你不可能得到轮船，而发动机的出现，跟”船“这个”物种“不存在任何关系。而从喷气机到内燃机，也不是一脉的向前突变得到的，而是依赖完全不同的物理理论的出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.技术进化的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么技术领域的究竟如何向前进化的呢？技术作家布莱恩.阿瑟在其《技术的本质》一书里给出了一个初步的答案。布莱恩.阿瑟认为技术的进化具有以下两大特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组合进化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;技术总是由一些基本的功能模块组合而成的&lt;/strong&gt;。技术的组合进化，是技术演变的最本质特征，也是其不同与生物进化的根本区别。&lt;/p&gt;
&lt;p&gt;在人类发展最初的石器时代，石制工具就被打磨成两类，锋利的和有孔的，这两类又与木制的手柄组合成复合工具，锋利的成了矛，有孔的成了锤头。回到现代，你打开一台老式的台式电脑，你会发现里面的零部件，如CPU，硬盘，内存条等。同时拆开一台现代的智能手机，也会发生同样的部件。同样，蒸汽机的出现，其与原来的帆船技术的组合，从而使得轮船得以出现服务于人类。&lt;strong&gt;技术在某种程度上一定是来自此前已有技术的新的组合&lt;/strong&gt;，这是新技术出现的根本特征，也解答了进化论中关于”变异“那一部分问题。而这个组合进化产生变异的特征在生物体上是看不到的，生物的变异是指单个生物体的基因突变，而不同物种相互组合杂交而进化，几乎没出现过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具有层级递归性模块化演进&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术是组合进化的，但是其不是单纯的一层组合，也就是说不是将具有匹配的概念或原理的目的单层次的聚集起来，即可得到新的技术。其组合具有层次结构。可以将技术分解成主集成，次级集成，次次级集成等，直至分解为最基本的部分。如果说整体的技术是树干的话，那次级集成是枝条，最基本的零件就是更小的分支了。以一本纸质书为例，其主集成是纸张和印刷的组合，而纸张和印刷两者可以继续拆分，如印刷可以拆分为油墨技术，电子技术等等。&lt;strong&gt;技术呈现出这种递归性的结构，技术总是包含着技术，直到最基础的水平&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果只是将技术的单元进行层次化的组合，那将是一个无比复杂的工程。比如一个手表有1000个零件，一个钟表匠一个零件一个零件地安装，安装过程中，如果他的工作被打断了，他就必须从头开始。但是，如果将10个模块组装起来，每个模块又由10个子模块组装起来，每个子模块由10个零件组合起来，当他暂停或被打断工作时，他只是损失了一小部分工作。这种零件集成可以更好地预防不可预知的变动，且更易修复。同时，除了解决复杂性的带来的低效问题，模块化更为重要的一点是允许技术的组成部分分别演进，从而又再推动整体技术的前进。好比如发动机的这一模块的进步，可以推动汽车，轮船这些整体技术的进步一样。&lt;/p&gt;
&lt;p&gt;当然，将技术分割为功能模块是需要付出一些代价的，比如需要耗费时间和精力定义模块之间的标准等。所以，&lt;strong&gt;只有模块能被反复使用，且反复使用的次数足够时，才值得付出代价将技术进行分割&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三.技术进化的启示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面关于技术进化的特点的讨论，不只是让我们认识了技术进化的与生物进化的区别，更是能更好的指导我们构建更有生命力能向前进化的技术产品。回到我们熟悉的软件系统领域，我们见过太多技术产品被很快淘汰，也见过很多技术产品永远处于不断推倒后重构的死胡同里。从进化的角度看，这样的技术产品根本不存在进化的可能。这其中根本原因，我想更多是其没有满足我们前文说到的可进化技术的一些基本特点。一个没有组合特点的系统，其必然扩展性差，必然面临无法向前进一步进化的可能。而没有定义层次和规则，那也就没有模块化的概念，系统无法进行单个模块的垂直演进，没有模块级别的重用， 当碰到任何不可预知的变动，必然是全部推倒重新再来。这样的系统产品，当然也就不存在生命力可言。&lt;/p&gt;
&lt;p&gt;对此审视我们用过的系统产品，那些经久不衰的，如Unix/Linux，必然是遵循这技术进化的根本特征的。而对于当今互联网产品而言，生命力确实是一个奢侈的词，这应该不仅仅是生态环境的选择问题,而需要系统产品生产者更多的反思！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几日，吴军博士在微博上转发了王石为其新书《文明之光》写的序言。在序言里，王石提到了达尔文进化论在社会与技术的适应性问题。王石在他短短几句话里并未充分说明了他的观点，只是举了英文键盘的例子说明了&lt;strong&gt;存活下来的不一定更“好”，仅仅是更“适”而已&lt;/strong&gt;。
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>不确定性与马尔科夫链</title>
    <link href="http://sharecore.net/2014/07/13/%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E4%B8%8E%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE/"/>
    <id>http://sharecore.net/2014/07/13/不确定性与马尔科夫链/</id>
    <published>2014-07-13T15:59:25.000Z</published>
    <updated>2016-06-20T13:12:11.000Z</updated>
    
    <content type="html">&lt;p&gt;这个月玩公司的世界杯竞猜游戏，期间经历了各种跌宕起伏，有过竞猜游戏币被清零的记录（后来贷款翻身），也有过“一夜暴富”荣登榜首的时候（多亏了乌拉圭人和巴西人），到现在理论上还保留着拿最后冠军的希望。游戏期间无数次想到了关于“不确定性”的理论，结合以前读书的一些所获，如是有了今天的文字。&lt;/p&gt;
&lt;h2 id=&quot;一-不确定性&quot;&gt;一.不确定性&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 不确定性含义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓不确定性，是指超越人类理性驾驭而无法预测的事情。我们生活充满了不确定性。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;深圳下半年的房价是会上涨还是下跌？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;某互联网公司明年的股票走势如何？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人类的的所有家务劳动，在未来一百年内会不会可以被机器人取代呢？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于不确定性，其实有两个层面的含义，&lt;strong&gt;第一层理解是事物本身不能确定;第二层理解是事物本身是确定的，只是人类无法预知，或者预知要花费的成本不是人类有生之年可以承受的&lt;/strong&gt;。这两层含义，暂时是无法被证实或证伪的。这就好比如无法证明上帝是否存在一样，但是基督教通过“信仰”来解决，他们告诉你：上帝是存在的，你希望他在他就在，你信他在他就在。&lt;/p&gt;
&lt;p&gt;人类对于不确定性有着天生的恐惧，生活在不确定性的世界里的人没有安全感。人类诞生之日起就开始了寻找真理之路。为什么要寻找真理呢？无非就是为自身提供一种安全感。在一个不确定性的世界里，人类不知道自己下一秒自己的命运或财富会不会颠覆，甚至连生命也没法得到保证，所以才会愿意牺牲部分个体活动的自由，集结成群，甚至是让少数人凌驾于自身之上，组织成政府，以取得安全感与保护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 不确定性的根源解释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于不确定性的根源，哲学与科学上已知的解释有两个：&lt;strong&gt;非线性与不确定性原理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非线性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见的线性思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只要每天多比别人工作2小时，就能产生好的绩效，拿更多的奖金&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只要赚到足够的钱，买房买车，心爱的妹子就会嫁给你&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经济危机时，只要多发货币就能刺激经济增长（凯恩斯主义）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;某公司因为抄袭所以获得了成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种简单的“只要…就…”，“因为…所以…“，就是典型的线性逻辑，也是人类大脑天生的默认工作模式，也被称为是一种”思考懒惰“。可是，事物的状态的确定并不是单纯的线性逻辑。多工作两小时，如果工作方向不对，工作方式效率低下，同时身体的精力也是有限，无法长期坚持长时间的工作，能不能产生好的绩效是不确定的;赚到足够的钱，但同时不能忘了，还有很多人跟你一样赚钱买房买车，甚至比你赚的更多，妹子的选择也就更多，最后嫁给你还是嫁给别人也是不确定的。凯恩斯主义就更不用说了，几年前的4万亿产生的后果，你我不都正在尝着吗？某公司抄袭，可是跟它一样抄袭的公司多了去了，最后都剩下的却寥寥无几。&lt;/p&gt;
&lt;p&gt;事物的发展按照的是非线性逻辑，决定了事物具有”不确定性“的天然属性。事物初始条件的细微变化都可能引起事物发展方向的极大扭转，以致我们无法预料。如蝴蝶效应，墨菲定律说的就是这个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不确定性原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不确定性原理&lt;/strong&gt;是量子物理学上的一个概念，它表明&lt;strong&gt;粒子的位置和动量不可同时被确定&lt;/strong&gt;。由德国的量子力学奠基人之一维尔纳·海森堡提出，也称为”海森堡不确定性原理“。&lt;strong&gt;不确定性原理从量子层面解释了不确定性是物质的固有属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常情况下，不确定性原理易与为大家所熟悉的”&lt;strong&gt;观察者效应&lt;/strong&gt;“所混淆，观察者效应是指被观察的现象会因为观察行为本身而受到一定程度或者很大程度的影响，也就是说由于事物被观察了，从而导致了它的行为路径发生变化。但这两者是不同的，观察者效应强调的是观察本身对事物的发展所产生的影响，而海森堡不确定性原理强调的是事物本身所具有的属性，跟观察本身无关,这点是需要注意的。&lt;/p&gt;
&lt;p&gt;前文说到人类对于不确定性有着天生的恐惧，而事物本身具有不确定的天然属性，这里存在着矛盾。而这种矛盾，正是&lt;strong&gt;激励人类不断向前追求真理的最大动力&lt;/strong&gt;。但不管追求真理之路向前走多远，对确定性的知识掌握总是有限，同时，对于一个个体来讲，由于精力和智力所限，能掌握的确定性知识也更为有限。以至于完全靠真理和知识来克服对不确定性的恐惧，是不现实的。为了在真理和知识缺乏的情况下作出准确（或合适）的决策判断，人类学会了&lt;strong&gt;概率思考&lt;/strong&gt;，即从事物的历史发展轨迹中统计分析将来的发展方向。建立了较为完善的数理分析理论，比如提出常见中心极限定理、正态分布、二项式分布等基础的统计知识理论。&lt;/p&gt;
&lt;p&gt;在读吴军的《数学之美》一书，对于其中提到的&lt;strong&gt;马尔科夫链&lt;/strong&gt;预测模型印象颇为深刻。马尔科夫链就是一个非常简单的概率思考模型。&lt;/p&gt;
&lt;h2 id=&quot;二-马尔科夫链&quot;&gt;二.马尔科夫链&lt;/h2&gt;&lt;p&gt;前文说到，随着时间的发展，事物所呈现的状态是不确定的，也可以称为是随机的。比如我们可以将&lt;em&gt;s1,s2,s3….st,…&lt;/em&gt;看成是这一个月来深圳每天的最高气温，这里的每个&lt;em&gt;st&lt;/em&gt;都是随机的。同时，事物的每个状态可能与它周围其它的状态相关，比如这一个月每天的最高气温，可能与深圳前段时间的最高气温相关。如果要把每个决定因素考虑进来，将会无比复杂，超出认知预测的范围。为此，俄罗斯数学家安德烈·马尔可夫提出简化的假设：&lt;strong&gt;假设事物每个状态，只与它的前一状态相关,而不考虑历史其它状态&lt;/strong&gt;。比如，我们预测明天的气温，只考虑今天气温，而硬性规定不考虑前天的气温情况。由于，这种状态转换的呈现出链表的形式，所以也称为&lt;strong&gt;马尔科夫链&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;日常生活中，有很多事情可以用马尔科夫假设来简化的。比如在我们行走时，我们的下一位置，一般只与我们当前的位置（假设为5）有关，我们向前一步，位置就+1（即为6）,向后一步位置就-1（即为4），这个下一位置与我们当前位置之前的位置（1,2,3,4）没有关系，可以忽略。当然，并不是每个事物都满足马尔科夫假设，比如彩票。&lt;/p&gt;
&lt;p&gt;而将&lt;strong&gt;马尔科夫假设与事物状态转换概率结合来&lt;/strong&gt;就可以建立一个简单的预测模型。我们以天气预测的例子来说明:&lt;/p&gt;
&lt;p&gt;根据日常经验，我们看到当前的天气状态是多云时，天气的下一个状态可能会是下雨;而当雨水开始消退，云也减少时，接下来可能就是天晴了。我们收集某个地区十年内的天气数据，计算出每种天气（暂时限制为三种：多云，晴天，雨天）之间相互转化的概率，统计结果如下表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/markov_table.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上转换表可以用&lt;strong&gt;状态机&lt;/strong&gt;来表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/markov_list.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;也可以用&lt;strong&gt;状态转换矩阵M&lt;/strong&gt;来表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/markov_matrix.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了状态转换矩阵，通过基本的矩阵运算，就可以对下一天气状态进行预测了。假设当前状态是多云，即100%确认当前天气为多云，可以用&lt;strong&gt;向量V&lt;/strong&gt;来表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/markov_vector.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;对下一状态的预测可以通过以下运算求得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下一状态S2 = V&amp;times;M = [(1 &amp;times;0.1 + 0&amp;times;0.3 + 0&amp;times;0.4); (1&amp;times;0.5 + 0&amp;times;0.6 + 0&amp;times;0.1); (1&amp;times;0.4 + 0&amp;times;0.1 + 0&amp;times;0.5)]&lt;br&gt;= [0.1; 0.5; 0.4];*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即可得下一状态多云的概率为0.1,雨天的概率为0.5,晴天的概率为0.4，雨天的可能性最大&lt;/p&gt;
&lt;p&gt;继续计算下一状态S3&lt;/p&gt;
&lt;p&gt;*S3 = S2&amp;times;M =[(0.1&amp;times;0.1 + 0.5&amp;times;0.3 + 0.4&amp;times;0.4); (0.1&amp;times;0.5 + 0.5&amp;times;0.6 + 0.4&amp;times;0.1); (0.1&amp;times;0.4 + 0.5&amp;times;0.1 + 0.4&amp;times;0.5)]&lt;br&gt;= [0.32; 0.39; 0.29];*&lt;/p&gt;
&lt;p&gt;不出意料，雨天的可能性还是最大。无论再计算多少步，结果都会是雨天的可能性最大。这是为什么呢？是因为状态转换表只保存了最后的一个状态的信息，所有的状态转换只与最后一个状态信息相关，所以，接下来的状态也就逃脱不出初始状态的约束了。这种只考虑最后一个状态信息的马尔科夫链称为&lt;strong&gt;1阶马尔科夫链&lt;/strong&gt;。那如如果要提高准确性，使得下一状态不只是受上一状态的约束，该怎么做呢？可能你已经想到了，提升到&lt;strong&gt;多阶马尔科夫链&lt;/strong&gt;*即可。比如2阶马尔科夫链的转换概率表可以用如下的表格来表示（只画出了1/3部分，其它部分依次类推，共会有18种组合）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/markov_table_2.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上2阶状态转换表，表明了下一天气状态是由最后两天的天气决定，由它计算出来的结果准确性会比1阶的矩阵计算结果要高，随着阶数的继续递增，准确性也会相应的提高。可是这个提高是有代价的，阶数越高，计算的复杂性也就越大，而且是呈指数级的增长而&lt;strong&gt;非线性&lt;/strong&gt;的增长。当阶数增大一定程度，计算的复杂度超过人类现有的计算能力范围后，问题也就变成了&lt;strong&gt;不确定性问题&lt;/strong&gt;了。&lt;/p&gt;
&lt;h2 id=&quot;总结：&quot;&gt;总结：&lt;/h2&gt;&lt;p&gt;世界万物具有本质的不确定性，人类由于对不确定性的恐惧而选择追逐真理。但是，完全靠真理来克服对不确定性的恐惧是不现实的，有时候我们需要学会接受不确定性，并通过概率思考来来对不确定性作出决策判断。马尔科夫链模型就是一个非常简单的概率决策模型，是很好的概率思考实践。&lt;/p&gt;
&lt;p&gt;最后PS一条：如果你没法掌握足够的股票市场一手信息，遵循“买涨不买跌”的原则进行股票交易的话，会比你无意义的各种推测要好的多！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这个月玩公司的世界杯竞猜游戏，期间经历了各种跌宕起伏，有过竞猜游戏币被清零的记录（后来贷款翻身），也有过“一夜暴富”荣登榜首的时候（多亏了乌拉圭人和巴西人），到现在理论上还保留着拿最后冠军的希望。游戏期间无数次想到了关于“不确定性”的理论，结合以前读书的一些所获，如是有了今
    
    </summary>
    
    
      <category term="复杂性" scheme="http://sharecore.net/tags/%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>可扩展架构设计的三个维度</title>
    <link href="http://sharecore.net/2014/07/05/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6/"/>
    <id>http://sharecore.net/2014/07/05/可扩展架构设计的三个维度/</id>
    <published>2014-07-04T16:00:01.000Z</published>
    <updated>2016-06-20T13:14:39.000Z</updated>
    
    <content type="html">&lt;p&gt;业界对于可扩展的系统架构设计有一个朴素的理念,就是：&lt;strong&gt;通过加机器就可以解决容量和可用性问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这一理念在“云计算”概念疯狂流行的今天，得到了广泛的认可！对于一个规模迅速增长的系统而言，容量和性能问题当然是首当其冲的。但是随着时间的向前，系统规模的增长，除了面对性能与容量的问题外，还需要面对功能与模块数量上的增长带来的系统复杂性问题以及业务的变化带来的提供差异化服务问题。而许多系统，在架构设计时并未充分考虑到这些问题，导致系统的重构成为常态，从而影响业务交付能力，还浪费人力财力！&lt;/p&gt;
&lt;p&gt;对此，《可扩展的艺术》一书提出了一个更加系统的可扩展模型——&lt;strong&gt;AKF可扩展立方&lt;/strong&gt;（Scalability Cube）。这个立方体中沿着三个坐标轴设置分别为：X、Y、Z。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X轴扩展 —— 关注水平的数据和服务克隆，也就是前文提到的“加机器解决问题”
Y轴扩展 —— 关注应用中职责的划分，比如数据类型，交易执行类型的划分 
Z轴扩展 —— 关注服务和数据的优先级划分，如分地域划分
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整个扩展模型，用下图来表示，其中原点代表完全无扩展的状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/akf.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.X轴扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;X轴扩展与我们前面朴素理念是一致的，通过绝对平等地复制服务与数据，以解决容量和可用性的问题。我们以生产汽车的工厂来举例：假设一个车间能完整的生产一辆汽车，为了短时间内生产更多的汽车，我们可以建设更多的车间，任何新增车间除了工作的效率可能不同之外，都是一个新的复制品，也能提供与原来车间相同的工作，生产出完整的汽车。给复制品分配工作就是一个X轴扩展的一个完美示例，说明了X轴扩展的思路，即把工作无偏向的分配给复制品，每个复制品在不考虑生产效率的情况下，谁来做这项工作是无偏向的,&lt;strong&gt;各个复制品之间不共享任何内容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而在工程技术上来讲，X轴扩展主要有以下两种技术方案：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.负载均衡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;故名思议，负载均衡就是将用户的访问请求通过负载均衡器，均衡分配到由各个“复制品”组成的集群中去。当某个复制品出现故障，也能轻易地将相应“工作”转移给其它的复制品来“代为完成”。这中间涉及到的工程技术点包括了反向代理，DNS轮询，哈希负载均衡算法（一致性哈希），动态节点负载均衡（如按CPU，I/O）等。它的难点在于要求集群中的“复制品”是不共享任何内容，也就是我们常说的&lt;strong&gt;无状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.数据复制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据复制是指在数据存储层进行绝对平等地数据迁移，用于解决存储层I/O瓶颈以及可用性上的问题。由于存在多个复制品存储，为了使得每个复制品提供无差异的数据服务，我们需要在复制品之间同步或异步地复制数据。数据复制的方式包括了主从同步（常见的读/写分离），双主同步等。因为数据存储天生就是有状态的，数据复制的难点在于&lt;strong&gt;一致性&lt;/strong&gt;的保证上，为了一致性的保证，从而也衍生了很多复杂的技术，比如Paxos选举算法等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.Y轴扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Y轴扩展表示的是根据数据的类型或者交易执行的类型（或者两者都有）来划分工作职责。一般称为面向服务或面向资源的扩展。我们再以生产汽车的工厂来举例：如亨利.福特所做的一样，将汽车制造的工序按专业性分成不同车间和流水线，不再是一个车间负责完成100%的任务，制造一辆完整的汽车，而是让这每个车间都执行一些子任务，如安装发动机，喷漆，安装玻璃等等。这样的分工，益处是明显的，每个车间负责的&lt;strong&gt;任务更简单&lt;/strong&gt;，从而能更专业更高效的完成生产。&lt;/p&gt;
&lt;p&gt;与汽车工厂的分工类似，为了降低系统复杂度，Y轴扩展会将庞大的整体应用拆分为一组服务。每个服务实现一组相关的功能，如订单管理、客户管理等。在工程上常见的方案是&lt;strong&gt;服务化架构(SOA)&lt;/strong&gt;。比如对于一个电子商务平台，我们可以拆分成不同的服务，组成下面这样的架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;但通过观察上图容易发现，当服务数量增多时，服务调用关系变得复杂。为系统添加一个新功能，要调用的服务数也变得不可控，由此引发了服务管理上的混乱。所以，一般情况下，需要采用服务注册的机制形成服务网关来进行服务治理。系统的架构将变成下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa1.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时，为了提升单个服务的可用性和容量，&lt;strong&gt;对每一个服务进行X轴扩展划分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/soa2.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三.Z轴扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Z轴扩展通常是指基于请求者或用户独特的需求，进行系统划分，并使得划分出来的子系统是相互隔离但又是完整的。继续以生产汽车的工厂来举例：福特公司为了发展在中国的业务，或者利用中国的廉价劳动力，在中国建立一个完整的子工厂，与美国工厂一样，负责完整的汽车生产。这就是一种Z轴扩展。&lt;/p&gt;
&lt;p&gt;对于系统而言，Z轴扩展一般是为了满足差异性的需求或者是为了安全隔离而采取的扩展措施。比如为了提供VIP用户服务，可以将系统完整地复制一份出来，与普通用户所使用的系统完全隔离开来;再如，针对不同的地域用户，系统自动切换到对应地域的子系统，为用户提供服务，都可以认为是Z轴扩展。同时，在系统的灰度部署上，我们也通常使用Z轴扩展来完成。&lt;/p&gt;
&lt;p&gt;工程领域常见的Z轴扩展有以下两种方案：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.单元化架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在分布式服务设计领域，一个单元（Cell）就是满足某个分区所有业务操作的自包含闭环。如上面我们说到的Y轴扩展的SOA架构，客户端对服务端节点的选择一般是随机的，但是，如果在此加上Z轴扩展，那服务节点的选择将不再是随机的了，而是每个单元自成一体。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cell.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.数据分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了性能数据安全上的考虑，我们将一个完整的数据集按一定的维度划分出不同的子集。&lt;br&gt;一个分区（Shard），就是是整体数据集的一个子集。比如用尾号来划分用户，那同样尾号的那部分用户就可以认为是一个分区。数据分区为一般包括以下几种数据划分的方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数据类型（如：业务类型）
数据范围（如：时间段，用户ID）
数据热度（如：用户活跃度，商品热度）
按读写分（如：商品描述，商品库存）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，数据分区也是有代价的，它将增加数据运维的难度，关联搜索的复杂度增加等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个在可扩展性上设计良好的系统，会充分考虑三个维度上的可扩展性。X轴上扩展处理的是平台或系统执行的交易量或工作量增长，虽然X轴扩展能够很好处理交易量的增长，但当系统复杂度的大幅度增加，或用户数量增加以及差异化服务需求出现，X轴扩展就难以应付了，如是我们可以通过Y轴扩展来处理系统复杂度增长的问题以及Z轴扩展来处理差异性化需求的问题。而当采用的扩展坐标轴不止一条时，那么&lt;strong&gt;X轴扩展总是其它扩展方法的次级划分&lt;/strong&gt;。同时，这三个维度扩展性，使得系统性能上改善有了更多的方向，对于系统性能优化，也是至关重要。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;业界对于可扩展的系统架构设计有一个朴素的理念,就是：&lt;strong&gt;通过加机器就可以解决容量和可用性问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这一理念在“云计算”概念疯狂流行的今天，得到了广泛的认可！对于一个规模迅速增长的系统而言，容量和性能问题当然是首当其冲的。但是随着时间
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="架构" scheme="http://sharecore.net/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>值得借鉴的Google测试经验</title>
    <link href="http://sharecore.net/2014/06/29/%E5%80%BC%E5%BE%97%E5%80%9F%E9%89%B4%E7%9A%84Google%E6%B5%8B%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
    <id>http://sharecore.net/2014/06/29/值得借鉴的Google测试经验/</id>
    <published>2014-06-28T16:01:03.000Z</published>
    <updated>2016-06-20T13:14:42.000Z</updated>
    
    <content type="html">&lt;p&gt;近来读了《Google软件测试之道》一书，以下是我从书里得来的两点经验：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.紧密结合开发过程与测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试之难，保证产品开发质量之难，每个公司每个团队，都会碰到各自的的问题和困难。但最为常见的抱怨（尤其是在互联网行业）是：&lt;strong&gt;开发人员不重视测试，测试人员人手不足，开发迭代又快，测不过来&lt;/strong&gt;。不少团队还喜欢争论开发测试比是1：1还是1：5或者5：1的问题,经常搬出微软这些传统软件巨头的开发测试比是多少多少来为自己辩护。其实，靠堆积人海战术的测试，是不适合在线型的快速的产品交付模式的。Google在这条路上就是另辟新径。&lt;/p&gt;
&lt;p&gt;Google的“新径”说到底其实也很简单，就是将开发过程和测试混合在一起，密不可分，他们认为测试是开发过程中必不可少的部分，当开发过程和测试一起携手联姻时，即是质量达成之时。 &lt;/p&gt;
&lt;p&gt;Google的测试主管Patrick说道：&lt;br&gt;&lt;strong&gt;&lt;em&gt;一个团队能编写出高质量的产品的唯一途径是全体人员共同对质量负责，包括产品经理，开发人员，测试人员等所有人。达到此目的最好方式是使测试人员有能力将测试变成代码库的一个实际功能，而测试功能的地位和应该与真是客户看到的任何其它功能同等重要。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google将工程师团队分成以下三种角色：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 软件开发工程师(SWE，software engineer)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SWE就是传统上的开发角色，他们的职责就是实现用户使用功能的代码。但是除此之外，&lt;strong&gt;SWE还需要编写测试代码，包括进行测试驱动的设计，单元测试，参与构建各种大小规模的测试等&lt;/strong&gt;。简单来说，SWE所有时间都是花在了代码编写上，包括功能代码以及对这些功能代码进行测试用的测试代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 软件测试开发工程师(SET,software engineer in test)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SET应该是Google能促进开发过程与测试紧密合起来的最关键角色&lt;/strong&gt;。SET的工作重心在于提供可测试性和通用性测试的基础框架上。传统的测试由于这一角色的缺乏，导致产品的可测试性难以保证，最后沦为开发人员由于编写测试代码困难，不愿意去写测试代码，而测试人员由于模块化测试困难，导致不能尽早介入到开发流程中去，而只能在产品交互后做停留在表面的集成测试。&lt;/p&gt;
&lt;p&gt;而SET这一角色的存在，很好的解决了这一个问题。SET会提供各种mock/fake框架，SWE在编写代码时，可以利用这些框架与外部依赖解耦，使得产品的单元测试和测试的自动执行变得相当容易。同时，集成测试也可以更早地进行，提高了测试人员的效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.测试工程师(TE,test engineer)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TE更多地代表的是用户利益，他们需要把用户放在第一位来思考&lt;/strong&gt;。 TE需要组织整体的质量实践，分析和解释测试执行结果，驱动测试执行，构建端到端的自动化测试。他们早期会通过关注bug数，以&lt;strong&gt;确认开发人员在测试方面是做得到位&lt;/strong&gt;。当bug数减少后，他们在以用户使用的场景，来进行&lt;strong&gt;探索性的测试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以上三个角色的紧密配合，完成了开发过程与测试的“联姻”。而这个负责“牵红线的月老”，我想就是SET这个角色。SET是产品可测试性的保证。同时，可测试性不只是将开发过程和测试紧密结合的基础，同时还是检验代码质量和架构是否优良的最好工具。我一直信奉下面这个公式：&lt;strong&gt;&lt;em&gt;可测试性=低耦合=优秀的代码=良好的架构&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.版本发布的“爬，走，跑”模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;熟悉google产品的，应该经常能看到google许多发布的版本后面都带着beta的标签，如我现在是用的chrome版本就是“33.0.1750.29 beta”。许多产品在线运营了多年，beta的标签也没有去掉，这个标签是在警示用户，产品仍处于改良之中。对于最终用户，只有产品达到99.99%的可用性，才会将beta的标签去掉。&lt;/p&gt;
&lt;p&gt;一般一个产品在发布给用户之前，一般要经历金丝雀版本，开发版本，测试版本，beta或正式发布版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;金丝雀版本&lt;/strong&gt;:即每日构建版本，用来排除一些明显问题的版本。这是一个极不稳定的版本，可能随时崩溃。一般只有产品的工程师（开发或测试人员）才会安装使用金丝雀版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发版本&lt;/strong&gt;：这个是开发人员日常使用的版本，一般是每周发布一个。该版本具有一定的功能并通过了一系列的测试。所有这个产品下的工程师都被要求去安装这个版本，并在日常工作中真正使用它。这其实体现“Eating your own dog food”的软件开发“黄金法则”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试版本&lt;/strong&gt;：这是一个通过了持续测试的版本,一般是一个月里最佳版本。一般可以被挑选为内部尝鲜，当做整个公司的“dog food”。如果该版本能持续表现良好，可作为beta测试的候选版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;beta或发布版本&lt;/strong&gt;：这个版本由非常稳定的测试版本演变而来，并经历了内部使用和通过所有质量考核的一个版本，也是对外发布的第一个版本。&lt;/p&gt;
&lt;p&gt;这种“爬，走，跑”的模式，能给产品提供一个测试验证的良好机会，并尽快得到使用过程中的反馈。&lt;/p&gt;
&lt;p&gt;以上两点，就是《Google软件测试之道》一书能带来的两点经验，书的其它大部分内容是许多Google内部人士的访谈，我认为这部分都“太Google”了，价值不是太大，也是此书的问题所在。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近来读了《Google软件测试之道》一书，以下是我从书里得来的两点经验：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.紧密结合开发过程与测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试之难，保证产品开发质量之难，每个公司每个团队，都会碰到各自的的问题和困难。但最为常见的抱怨（尤其是在互联网
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="测试" scheme="http://sharecore.net/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>过载保护算法浅析</title>
    <link href="http://sharecore.net/2014/06/21/%E8%BF%87%E8%BD%BD%E4%BF%9D%E6%8A%A4%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/"/>
    <id>http://sharecore.net/2014/06/21/过载保护算法浅析/</id>
    <published>2014-06-20T16:01:40.000Z</published>
    <updated>2015-03-16T16:30:03.000Z</updated>
    
    <content type="html">&lt;p&gt;何为&lt;strong&gt;过载保护&lt;/strong&gt;？所谓“过载”，即需求超过了负载能力;而“保护”则是指当“过载”发生了，采取必要的措施保护自己不受“伤害”。在计算机领域，尤其是分布式系统领域，“过载保护”是一个重要的概念。一个不具备“过载保护”功能的系统，是非常危险和脆弱的，很可能由于瞬间的压力激增，引起“&lt;strong&gt;雪崩效应&lt;/strong&gt;”，导致系统的各个部分都同时崩溃，停止服务。这就好像在没有保险丝的保护下，电压突然变高，导致所有的电器都会被损坏一样，“过载保护”功能是系统的“保险丝”。&lt;/p&gt;
&lt;p&gt;去年开始，写了一个RPC服务框架，用以承接各个业务系统在其上进行各类业务服务接口的开发与部署，供远端调用。之于此类的框架，“过载保护”就是一个必须具备的功能特性，用以保护底层提供服务的业务系统不受“恶意”调用或突发性调用的破坏。而在整个实现整个功能的过程中，我发现实现“过载保护”算法是一个很有趣也比较有挑战的活。今天就稍微介绍一下这方面的算法吧。&lt;/p&gt;
&lt;p&gt;可能跟大多数人一样，拿到这个算法需求很容易想到一个简单而又有点粗暴的算法：设置一个单位时间（如10s）内的最大访问量，并维护一个单位时间里的计数器，当访问请求到达时，先判断单位控制时间是否已经超时，如果已经超时，重置计数器为0;否则，将计数器加1,并判断计数器的值是否超过最大访问量设置，如超过，则拒绝访问。&lt;/p&gt;
&lt;p&gt;具体的伪代码如下：（当然，具体的代码实现还有考虑并发的情况）&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeStamp=getNowTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; reqCount=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxReqCount=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//时间周期内最大请求数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; effectiveDuration=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//时间控制周期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;bool &lt;span class=&quot;title&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; now=getNowTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (now &amp;lt;timeStamp+effectiveDuration)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//在时间控制范围内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reqCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reqCount&amp;gt;maxReqCount;&lt;span class=&quot;comment&quot;&gt;//当前时间范围内超过最大请求控制数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeStamp=now;&lt;span class=&quot;comment&quot;&gt;//超时后重置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reqCount=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该算法实现确实是实现了“单位时间里最大访问量控制”这一需求，但是，仔细研究下，发现它在两个单位时间的临界值上的处理是有缺陷的。如：设需要控制的最大请求数为1w, 在第一个单位时间的最后一秒里达到的请求数为1w,接下来第二个单位时间内的第一秒里达到请求数也是1w,由于超时重置发生在两个单位时间之间，所以这2w个请求都将通过控制，也就是说在2s里处理2w个请求，与我们设置的10s里1w个请求的需求相违背。&lt;/p&gt;
&lt;p&gt;换句话说，这个算法，对请求的控制不够平滑。那是不是还有更平滑的算法呢？有，&lt;strong&gt;漏桶算法（Leaky Bucket）&lt;/strong&gt;就是其一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Leaky_bucket.JPG&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图来自wikipedia）&lt;/p&gt;
&lt;p&gt;如上图所示，我们假设系统是一个漏桶，当请求到达时，就是往漏桶里“加水”，而当请求被处理掉，就是水从漏桶的底部漏出。水漏出的速度是固定的，当“加水”太快，桶就会溢出，也就是“拒绝请求”。从而使得桶里的水的体积不可能超出桶的容量。&lt;/p&gt;
&lt;p&gt;上面的分析可以看出，该算法存在三个变量：桶的容量capacity，水漏出的速度rate，以及当前的水量water。&lt;/p&gt;
&lt;p&gt;算法伪代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeStamp=getNowTime();        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; capacity;        &lt;span class=&quot;comment&quot;&gt;// 桶的容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rate ;          &lt;span class=&quot;comment&quot;&gt;//水漏出的速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; water;          &lt;span class=&quot;comment&quot;&gt;//当前水量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;bool &lt;span class=&quot;title&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//先执行漏水，因为rate是固定的，所以可以认为“时间间隔*rate”即为漏出的水量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;  now = getNowTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  water = max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, water- (now - timeStamp)*rate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeStamp = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (water &amp;lt; capacity) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 水还未满，加水&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    water ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//水满，拒绝加水&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上算法，我们可以通过调整capacity的值，来控制系统处理的最大请求数。而上文我们提到的时间边界处理的不够平滑问题，也可以很好的解决了，因为在每次进桶前都将执行“漏水”的操作，时间的切片不再是一个固定的值。&lt;/p&gt;
&lt;p&gt;如果你现在正在维基百科上查看“漏桶算法”的篇章，你会发现有一个与“漏桶算法”相关联的算法叫&lt;strong&gt;令牌桶(Tocken Bucket)&lt;/strong&gt;算法。令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。从原理上看，令牌桶算法和漏桶算法是相反的，一个“进水”，一个是“漏水”。&lt;/p&gt;
&lt;p&gt;令牌桶算法伪代码如下，跟漏桶算法很相似：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeStamp=getNowTime();        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; capacity;              &lt;span class=&quot;comment&quot;&gt;// 桶的容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rate ;              &lt;span class=&quot;comment&quot;&gt;//令牌放入速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tokens;            &lt;span class=&quot;comment&quot;&gt;//当前水量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;bool &lt;span class=&quot;title&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//先执行添加令牌的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;  now = getNowTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tokens = max(capacity, tokens+ (now - timeStamp)*rate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeStamp = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//令牌已用完，拒绝访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tokens&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//还有令牌，领取令牌&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tokens--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    retun &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上是关于漏桶算法和令牌桶算法的基本介绍，你趋向于用哪个呢？我现在用的是“漏桶”，没有什么原因，因为我首先看到的它，然后才看到“令牌桶”。但当然，实现这两个算法后，离真正的过载保护还有许多工程上的问题需要解决，比如当系统是多个节点组成的集群来提供服务时，我们需要统一的存储（一般用Redis之类的内存级存储较为合适）来维护当前桶的状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;何为&lt;strong&gt;过载保护&lt;/strong&gt;？所谓“过载”，即需求超过了负载能力;而“保护”则是指当“过载”发生了，采取必要的措施保护自己不受“伤害”。在计算机领域，尤其是分布式系统领域，“过载保护”是一个重要的概念。一个不具备“过载保护”功能的系统，是非常危险和脆弱的，
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="架构" scheme="http://sharecore.net/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="算法" scheme="http://sharecore.net/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>程序员持续学习之道</title>
    <link href="http://sharecore.net/2014/06/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/"/>
    <id>http://sharecore.net/2014/06/15/程序员持续学习之道/</id>
    <published>2014-06-14T16:02:25.000Z</published>
    <updated>2015-03-16T16:30:14.000Z</updated>
    
    <content type="html">&lt;p&gt;我其实是一个悲观主义者，从开始成为一名程序员的那一天开始，我就对自己的职业充满着担忧。早期，我担忧的是我刚进入这一行，落后身边从事这一行多年的人太多，跟他们比，我一开始就处于“不公平“的起跑线上；二是当我稍微深入这行后，发现技术的道路充满了歧路和死胡同，稍不留神，就将落入再也跟不上技术进步的节奏，身边也充斥着类似的示例。&lt;/p&gt;
&lt;p&gt;好在在这条路上，我找到了一个克服担忧的良方：学习，坚持不懈的学习！&lt;/p&gt;
&lt;p&gt;人类最大的恐惧莫过于对未知的恐惧，而学习，是克服未知的一个最有效途径。那作为一个程序员，该如何才能做到坚持不懈的学习呢？我想主要有以下几点：&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1. 不抗拒变化，跟踪变化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里说的变化，更多指的是技术的变化。新技术永远层出不穷，如果你抗拒变化，或惧怕变化，在心里优势上就落后了一大截。很多程序员的技术道路越走越窄，当一门新技术来临时，他们从不去了解或研究，他们要么认为这是”换汤不换药“的”技术幌子“，不值得去研究，要么等着别人去研究，自己被动的接受别人的结论与成果。诚然，等待别人的研究结果也可行，但是，当身边没有人去研究呢？当研究的人不愿意提供给你他的研究结果呢？当别人的结论和结果是错误的呢？&lt;/p&gt;
&lt;p&gt;当然，业界的新技术层出不穷，要去跟踪每一项新技术的变化也是不可能的，我的建议是尽量掌握基础的技术，越是基础的技术越是恒定。如计算机的体系架构，TCP，HTTP，各类编程范式，OOP，MVC架构等，都是好多年来没有发生过变化的技术了。许多新技术也是建立在他们上面，当你了解了这些基础的技术，建立在他们之上的新技术也就能很快掌握了，并能迅速而准确地对这些新技术作出“价值判断”。&lt;/p&gt;
&lt;p&gt;技术的变化，其实也并不全是指业界的新技术来临，更多指的是，超出自己当前技术能力外，&lt;strong&gt;主动研究和选择的“新技术” ，主动丢弃老的套路和技术，不固步自封&lt;/strong&gt;。见过很多的程序员，他们写了很多年的代码了，技术能力还停留在数据库层写一个Sql(存储过程)+前端调用上。为什么如此呢？因为自开始写代码起，这样简单粗暴的方式就可以解决他们面对的问题了。所以，当碰到新的问题，他们就继续沿用着这种方式，而从不去看看业界是不是有更合适的方案来解决。长此以往，他们的技术能力也就不会有任何的变化，工作十年，只是将第一年所学的技术重复十年而已。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;2. 书宜杂读，业宜精钻&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑学家梁思成赴美留学，其父梁启超告诫说：你该挤出一部分时间学些常识性东西，特别是文学或人文科学，稍稍多用点工夫就能有大的收获。我深怕你因所学太专一，把多彩的生活弄得平平淡淡，生活过于单调，则生厌倦心理，厌倦一生即成苦恼之事……书宜杂读，业宜精钻。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习本身应该是一件很快乐的事情，但如果只是一味地沉浸于专业学习之中，难免会将本来快乐的事情弄成平淡和单调，更可怕的是，由此产生厌倦心理，放弃学习。&lt;/p&gt;
&lt;p&gt;所以，可以尽量跟随自己的兴趣，去更广泛地读书。历史，文学，心理学，哲学等等各方面的书都可以尝试去读，它们不仅丰富你的知识，更能让你在阅读中受到感动、教育和启迪。&lt;strong&gt;书读的更多更广泛，知道的事也就多，思路更加开阔，解决问题的能力也就能高于常人，从而反过来帮助到你专业能力的提升。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;3. 投资团队，积极打造学习型团队&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现代社会，难免的一点就是个人必须置身于群体之中，程序员更是如此。从群体心理学的角度来看，在群体里，个人的才智被削弱，异质性被同质性所吞没。由此，&lt;strong&gt;如果一个团队不爱学习，那么，其中的成员也很难坚持学习&lt;/strong&gt;（个性和意志力特别强的人除外）。&lt;/p&gt;
&lt;p&gt;如果你爱学习，请想办法让你的团队也变得爱学习，这样，你对学习的坚持将变得更加容易。或许你认为建立学习氛围，是团队领导的事情，跟自己无关。领导当然可以来做也需要来做这样的事情，但要明白的一点，学习这事，如果变成从上向下，就难免“政治化”了，容易失去它本身的意义。而从下往上，更能建立轻松和谐的学习环境。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我其实是一个悲观主义者，从开始成为一名程序员的那一天开始，我就对自己的职业充满着担忧。早期，我担忧的是我刚进入这一行，落后身边从事这一行多年的人太多，跟他们比，我一开始就处于“不公平“的起跑线上；二是当我稍微深入这行后，发现技术的道路充满了歧路和死胡同，稍不留神，就将落入再
    
    </summary>
    
    
      <category term="学习" scheme="http://sharecore.net/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>粗略估算</title>
    <link href="http://sharecore.net/2014/06/08/%E7%B2%97%E7%95%A5%E4%BC%B0%E7%AE%97/"/>
    <id>http://sharecore.net/2014/06/08/粗略估算/</id>
    <published>2014-06-07T16:03:08.000Z</published>
    <updated>2015-03-16T16:30:25.000Z</updated>
    
    <content type="html">&lt;p&gt;今天我们以两道可能看起来有点“惨无人道”的题目开始&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;em&gt;1.一个长方体的卡车车厢能装下多少个高尔夫球？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;em&gt;2.密西西比河一天流出多少水？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一个题目据说是Google的“产品经理”职位面试题，大家可能已经在网络上有过了解;第二个问题来自《编程珠玑》一书。&lt;/p&gt;
&lt;p&gt;很容易看出，这两道题的难点在于很难得出一个准确的答案。如果大家将思路放在寻找一个具体而精确的答案上的话，就落入了陷阱，因为这两道题要讨论的是另外一个主题：&lt;strong&gt;粗略估算&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓粗略估算，是指在已知的有限信息下，对一些似乎是算不出来的量，作出合理的&lt;strong&gt;猜测&lt;/strong&gt;，通常用来作量纲分析。&lt;/p&gt;
&lt;p&gt;我们先看看这两道题的答案是什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;假设卡车车厢的容积（长×宽×高）=10m×2m×3m=60m³，一个高尔夫球的半径大约为10cm，根据球体体积=4/3πr³，高尔夫球体积约为0.004m³（其它小数位，我们可以忽略，因为球体之间会存在缝隙），如是可得：卡车车厢可容纳60/0.004=15000个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;猜测出河的出口大约1英里宽和20英尺深，猜测河水的流速是每小时5英里，换算成天就是120英里。由体积公式可得：1英里×1/250英里×120英里/天 = 0.5英里³/天。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在以上的答案中，体现了粗略估算的两个关键点：&lt;strong&gt;公式与猜测&lt;/strong&gt;。公式，是进行估算的整体模型，而猜测，是对缺失信息的补充。这两者，一方面取决于我们的知识，比如知识告可以告诉我们，球体体积的计算公式是4/3πr³，另一方面取决我们的经验。但归根结底，经验更为重要。因为估算要应对的情况更多是信息的缺乏，所以需要更多的利用我们的经验（包括生活经验，工程经验等）来进行猜测，以补充缺失的信息，在平时更善于捕获和总结经验所得的人，或在某方面有更多历练的人，在某方面的估算上也就更有优势，比如一个有过性能调优经验的程序员，他在程序的性能估算上就会更加擅长。&lt;/p&gt;
&lt;p&gt;在科学界还有另外一个更“学术”的名称叫&lt;strong&gt;费米估算&lt;/strong&gt;（或费米问题），它的命名来自物理学家&lt;em&gt;恩里科·费米&lt;/em&gt;，费米以他通过非常少量或不精确的数据来得到比较好的估计的能力而被广泛熟知。一个例子就是他在主要领导的曼哈顿计划（美/英/加三国联合的原子弹制造计划）中估算核爆炸的”爆炸力相当量“。1945年7月16日晚，原子弹在内华达州的沙漠引爆成功时，费米在原子弹试爆现场附近，突然跃起向空中撒了一把碎纸片，爆炸后气浪将纸片急速地卷走，他紧追纸片跑了几步，并根据纸片飞出的距离估算了核爆炸的”爆炸力相当量“，费米计算出的爆炸威力相当于一万吨TNT炸药，非常接近现在所接受的二万吨的数值，之间的误差少于一个数量级。&lt;/p&gt;
&lt;p&gt;费米还善于提出各种估算的问题，比如他提出的一个经典的费米问题：&lt;strong&gt;在芝加哥有多少钢琴调琴师？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题的一个经典答案是建立在一系列的猜测上的：&lt;/p&gt;
&lt;p&gt;首先，建立我们估算的模型：&lt;strong&gt;需求=供给&lt;/strong&gt;。即需要被调整的钢琴数等于钢琴师可以调整的钢琴数。我们需要估算出一年中芝加哥有多少钢琴需要被调整以及一个钢琴师一年大概能调多少台钢琴，由此，我们作出以下一系列假设：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;芝加哥的居民数大约为5,000,000人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平均一个家庭有2个人，在20个家庭中有一个家庭需要定期调钢琴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定期调琴的周期为1年，每个调琴师大约要2小时来完成一次调琴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个调琴师每天工作8小时，一周5天，一年50周（为便于快速计算，将尾数去掉也是进行粗略估算的一个基本技巧）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这些假设我们可以计算出芝加哥每年需要调整的钢琴数量为：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(5,000,000 人) / (2 人/家) × (1 架钢琴/20 家) × (1 架钢琴调整/1年) = &lt;strong&gt;125,000架&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;类似地计算出平均每个调琴师：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(50 周/年)×(5 天/周)×(8 小时/天)/(1 架钢琴/2小时) = &lt;strong&gt;1000 架钢琴每年/1调琴师&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;进一步计算即得出答案：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;125000架钢琴 /( 1000架钢琴每年/1调琴师) = &lt;strong&gt;125 个调琴师&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最后，我们在附上两个可用于粗略估算的小经验法则，以便大家更好的进行类似的估算：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“72法则”&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“72法则”主要用于指数级增长情况的估算&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;比如以r%的年利率投资一笔钱y年，如果r*y=72，那么你的投资差不多会翻倍。具体来看：以6%投资1000美元12年，可得到2012美元，以年利率8%投资1000美元9年，可得到1999美元。&lt;/p&gt;
&lt;p&gt;“72法则”对程序员估计一个时间复杂度是指数级的程序性能来说也非常有用，当n每增加1,运行时间就是增加12%时，那由“72法则”可得当n每增加6,运行时间就加倍了，或者n每增加60,运行时间增加为原来的1000倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Little定律&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;对于一个有输入和输出的系统，&lt;em&gt;*系统中物体的平均数量等于物体离开系统的平均速率和每个物体在系统中停留的平均时间的乘积&lt;/em&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;比如假设酒窖里有150箱酒，每年喝掉25箱并存入25箱，那么每箱酒的保存时间是多长呢？Little定律告诉我们：用150箱/25箱/年=6年&lt;/p&gt;
&lt;p&gt;再如：某个酒吧可以容纳约60人，每个人在里面逗留的时间大约是3小时，那进入该酒吧的速率大概就是每小时20人。也就意味着当你排队进入酒吧时，前面有20人排队，那你还需要等待大概一小时才可以进入酒吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们以两道可能看起来有点“惨无人道”的题目开始&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;em&gt;1.一个长方体的卡车车厢能装下多少个高尔夫球？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;em&gt;2.密西西比河一天流出多少水？&lt;/em&gt;&lt;/strong&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="算法" scheme="http://sharecore.net/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>程序员的良心</title>
    <link href="http://sharecore.net/2014/05/31/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%89%AF%E5%BF%83/"/>
    <id>http://sharecore.net/2014/05/31/程序员的良心/</id>
    <published>2014-05-30T16:04:20.000Z</published>
    <updated>2015-03-16T16:30:46.000Z</updated>
    
    <content type="html">&lt;p&gt;前几日，深圳暴雨，官方说是“xx年一遇”。当大家听到“xx年一遇”这一说时，你肯定猜到了后果就是城市成了一片汪洋，整个城市陷入瘫痪，所有的房子都成了海景房，居民推开窗就可以看大海了。&lt;br&gt;每到此，就想起台湾作家龙应台说的那句话：&lt;em&gt;验证一个国家和城市是否发达，一场雨足矣———最好来一场倾盆大雨，足足下三个小时，因为“它或许有钱建造高楼大厦，却还没有心力来发展下水道；高楼大厦看得见，下水道看不见。你要等一场大雨才能看出它的真面目来。”&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;心中无数遍地感叹”下水道是城市的良心啊”！深圳这座年轻的城市，下水道建设怎会如此不堪啊？ 更难以理解的是，每年都可以不计其数的发现城市道路被挖开，对下水道进行修修补补，可为什么，一到暴雨天，境况仍依旧呢？难道这些修修补补只是在糊弄民众？还是纳税人的钱无处可花？这些疑问，让我苦恼良久！&lt;/p&gt;
&lt;p&gt;后来，在一个媒体上看到一个“官方”的解释：深圳的下水道，是30年前才开始建设的，受限于整个城市建设的水平和当政者的眼光，整个下水道都是以一年一遇的雨量（相当于每小时降雨强度约为50毫米）来设计和建设的。最关键的是，30年来，忙于城市表面的快速建设，每年对下水道进行各种小修小补，却从进行过“重构”。悲乎！按此看来，城市的良心被侵蚀是必然的。&lt;/p&gt;
&lt;p&gt;作为一个程序员的我，又不由此想到我所从事的这个行业的，与下水道的建设又是何其的相似！我们在系统构建过程中，又何尝不是跟下水道的建设者一样，患着目光短浅，修修补补而从不“重构”的毛病呢？然后，随着业务的发展，不到两年，我们的系统就跟下水道一样，成了一个众人唾骂的“烂摊子”，最悲惨的事情是，你是不是还得跟下水道现在的维护者一样，吃力不讨好地维护着这个“烂摊子”系统呢？&lt;/p&gt;
&lt;p&gt;如果说下水道是城市的良心，那代码又何尝不是软件系统的良心呢？在软件系统的构建过程中，我们昧着“良心”，选择了太多的“妥协”，我们向“上线就是硬道理”妥协，向“快速发展就是硬道理”妥协，向“老板说的就是硬道理”妥协。系统最后被腐蚀的原因，就源于我们在构建过程中一次次“妥协”。&lt;/p&gt;
&lt;p&gt;但回过头再想，妥协除了外界的非技术的压力外，还有很多是由于程序员自身的“偷懒”。比如，当我们在A处看到一段代码，对我们正在构建的B处很有用，如是，我们偷懒地将这段代码复制到了B处，可能是原封不动的复制，可能只是改一个函数或变量的名称。这么一来，代码就被腐蚀了一部分，以后，系统维护的“熵”也就相应地增加。如果整个开发团队的人均是如此，系统离变得“不可维护”就不远了。&lt;/p&gt;
&lt;p&gt;这样的“偷懒”，有的是有意识的有的是无意识的。无意识的是能力问题，需要不断的学习来改善（希望本文能让你开始去意识到“偷懒”的问题）。而有意识的“偷懒”，就是关乎程序员自身的品质问题了，抱着这样的“邪念”来从事软件开发，我想是违背进入到这个行业的初衷。有时候，我们走得太远，别忘回头去想想我们的初衷，或许我们不能阻止波涛汹涌，但我们可以学会踏浪而行。&lt;/p&gt;
&lt;p&gt;有句名言说的好，当你写某一坨代码时，最好设想你的代码会被一个挥着斧头的精神病来维护，或许，这样能威慑你别昧着良心来“偷懒”。&lt;/p&gt;
&lt;p&gt;行文至此，我其实想到了，在我整个程序员的职业生涯，还是一样需要继续面对各种“烂摊子”系统，就像我生活的这个城市，在下一场暴雨来临时，又还是一片汪洋。哪怕我换一个城市，情况也将是类似。想到这，心里真是凄凉！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几日，深圳暴雨，官方说是“xx年一遇”。当大家听到“xx年一遇”这一说时，你肯定猜到了后果就是城市成了一片汪洋，整个城市陷入瘫痪，所有的房子都成了海景房，居民推开窗就可以看大海了。&lt;br&gt;每到此，就想起台湾作家龙应台说的那句话：&lt;em&gt;验证一个国家和城市是否发达，一场雨足
    
    </summary>
    
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>武曌皇帝之路</title>
    <link href="http://sharecore.net/2014/05/17/%E6%AD%A6%E6%9B%8C%E7%9A%87%E5%B8%9D%E4%B9%8B%E8%B7%AF/"/>
    <id>http://sharecore.net/2014/05/17/武曌皇帝之路/</id>
    <published>2014-05-16T16:05:00.000Z</published>
    <updated>2015-03-16T16:35:30.000Z</updated>
    
    <content type="html">&lt;p&gt;这周有两个妹子反馈说，上次写的齐桓公的故事，很精彩，她们第一次完整看完了一篇历史文字，甚感欣慰！其中一个妹子还希望我能讲讲她们女人中的“神”，武则天的故事。Justin为了对她的信任和欣赏表示感谢，这周就写一些关于女皇帝前前后后的故事吧。当然这些故事很多人写过，也被很多拍成了各种电视剧，我还是希望我能写出不同的视角。&lt;/p&gt;
&lt;p&gt;武则天，也名武曌（音zhào，同“照”），生逢李世民大帝执政的黄金时期。十三岁时，被选入宫。后李世民大帝听说其美貌，被封为“才人”，并赐号为“媚娘”。看似幸运的开始，其实“才人”这个地位，是一个让人绝望的位置。唐朝初期的后宫嫔妃宫分为十九级别（分别为：贵妃、淑妃、德妃、贤妃、昭仪、昭容、昭媛、修仪、修容、修媛、充仪、充容、充媛、婕妤、美人、才人、宝林、御女、采女;），而“才人”位列第十六级，并且同为“才人”的有九人，这个位置要向上爬到贵妃或皇后的位置，那就像我们一线工程师现在想爬到CTO的地位一样艰难。&lt;/p&gt;
&lt;p&gt;更让人绝望的事情，发生在她二十六岁那年，也就是公元649年，李世民驾崩！按找皇家的传统，驾崩天子的所有嫔妃，只有两条出路，一是殉葬，二是削发为尼，遁入空门，寂了终身。好在殉葬制度，在隋朝开始已经被取消了，武曌被送入长安的感业寺，削发为尼。&lt;/p&gt;
&lt;p&gt;都说所有的历史故事都是幸运之神一次次掷色子的随机选择幸运儿和不幸者。而这次，幸运之神眷顾的是处于绝望位置的武曌。就在她进入感业寺的第五年，也就是公元654年，继任皇帝李治，携其妻王皇后，来到感业寺祭拜。当年李世民还在世时，李治就对貌美如花的武曌安生情愫。而现在，在感业寺的落魄下相见，两人竞执手相看泪眼，互诉衷肠。而这一切，都被王皇后看在了眼里。&lt;/p&gt;
&lt;p&gt;王皇后此时，正与李治的另一位妃子萧淑妃争宠，于是，王皇后狡猾地将武曌接回宫，以拉同盟帮助自己打击萧淑妃。只是，王皇后没想到的是，这不只是找到一个斗争的帮手，也是位日后自己的粉身碎骨而引狼入室。&lt;/p&gt;
&lt;p&gt;武曌二进宫后，很快得到李治的欢宠。这是很容易理解的，那是李治27岁，而武曌正是女人早已成熟的31岁。一个没有什么人生经验的年轻男人落入一个历经风霜，饱含心机，成熟美貌的女人之手，就像掉进满是蜜糖的蜂窝，看似甜蜜，却难以逃生。很快，李治就完全成为了武曌的掌上玩物，而她的敌人们，历史的那些不幸运者，悲惨的命运也就即将开始。&lt;/p&gt;
&lt;p&gt;武曌确立了自己人生的第一个目标：&lt;strong&gt;皇后&lt;/strong&gt;。公元655年，武曌亲手扼死自己刚亲生下来的女儿，然后在李治面前诬陷说，这是王皇后下的毒手。还处于温柔乡里不愿醒来的李治，当然选择全盘相信。后来，这个杀女案经过武曌的进一步放大，最后沦为是王皇后和萧淑妃的集体谋反案。结果，王皇后和萧淑妃被杖刑一百，砍断手足，再投到酒缸（传说中的&lt;em&gt;人彘&lt;/em&gt;，人被砍去手足，一般容易伤口发炎很快死去，而酒有消毒的作用，所以可以多经历几天如活在地狱般的生命），李治和武曌，听着她们哀嚎几日而死！随后，武曌也就理所当然的坐到了皇后的位置。&lt;/p&gt;
&lt;p&gt;如果说达到当皇后这第一个人生目标的过程，体现了武曌近乎变态的心狠手辣的性格特点，那她在达到她的第二个目标——&lt;strong&gt;权力&lt;/strong&gt;——过程中，体现的却是另一面：聪明与忍耐。&lt;/p&gt;
&lt;p&gt;李治身体不好，常患头疼。很快，武曌与李治共同出现在了金銮殿上，共同听取臣工们的报告，并逐渐右武曌掌握了决议大权，两人后来逐被称为“二圣”，可国家的控制大权其实已名副其实的落在了武曌手上，而李治只是一个傀儡。按常人来说，武曌应该是用她的心狠手辣h害死李治为好，这样自己可以立即上位，真正坐上皇帝宝座。而聪明的武曌，并未这样做。她只是让李治有名无份地活下去，以期在这个傀儡的掩护下，为自己树立根基，产出反对她的人。只是，可怜的李治，未免活得太久了，整整在位三十五年，也就是公元683年才死，武曌也就在这个位置上苦心等待了三十来年。&lt;/p&gt;
&lt;p&gt;在李治死后，唐中宗李显继位。可只做了三个月的皇帝就被武曌罢免。武曌立她自己的儿子李旦即位，也就是唐睿宗，自己以皇太后的身份垂帘听政，李旦跟他父亲一样只是一个傀儡而已。九年后，也就是公元690年，武曌认为时机成熟，罢黜李旦，自己坐上了宝座。改国号为周，称为中国历史上第一个女皇帝。而此时，武曌已经是六十七岁的老太婆了，为了这个宝座，她前后苦心经营了三十来年，这是常人不可想象的坚毅与忍耐。&lt;/p&gt;
&lt;p&gt;武曌能控制欲望，并没有杀死李治，在李治死后也没有直接上位，这是她不同凡响的地方。在后来，李氏复辟后，武曌的儿媳妇，也就是唐中宗的老婆韦皇后，企图效法她的家婆，掌握政权，但她完全没有武曌的聪明与耐心，联合她的女儿安乐公主，毒死了李显，企图坐上宝座。谁料美梦还来不及醒，李显的侄儿李隆基（后来的唐玄宗，也就是唐明皇）率军冲入皇宫，这对狠毒的杀父弑夫的母女也就死于了李隆基的刀下！&lt;/p&gt;
&lt;p&gt;武曌当了十五年的皇帝，公元705年，张柬之用唐中宗李显复辟成功，武曌被逐回后宫。已经八十二岁的武曌，自然受不了这种打击，一命呜呼，去了！武曌当权期间的政绩，其实没啥好说的，不管多聪明的女人，她们与人斗可以，向来是不善于治国的，也不善于经济建设的。整个她掌权的几十年，唐王朝的社会一直停滞不前，文化与经济上也毫无建树，除了严刑酷吏。&lt;/p&gt;
&lt;p&gt;武曌的人生故事甚为精彩，不同的人看武曌，也会看出不同的角度，善良的人看到的是凶辣，奋斗中得人看到的是忍耐，阴险的人看到的是招数。而我看到的只是两个字：人性！而历史本身，也道不出一个前因后果，事情的发展总是充满了意想不到，而这也是我们后人说起这些故事时，总能感到精彩的原因吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这周有两个妹子反馈说，上次写的齐桓公的故事，很精彩，她们第一次完整看完了一篇历史文字，甚感欣慰！其中一个妹子还希望我能讲讲她们女人中的“神”，武则天的故事。Justin为了对她的信任和欣赏表示感谢，这周就写一些关于女皇帝前前后后的故事吧。当然这些故事很多人写过，也被很多拍成
    
    </summary>
    
    
      <category term="历史" scheme="http://sharecore.net/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一本书</title>
    <link href="http://sharecore.net/2014/05/10/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://sharecore.net/2014/05/10/如何阅读一本书/</id>
    <published>2014-05-09T16:05:32.000Z</published>
    <updated>2016-06-20T04:40:32.000Z</updated>
    
    <content type="html">&lt;p&gt;我好读书，读的很繁杂，从计算机技术到历史到国学和哲学，系统方法论等都是我爱好读的。&lt;br&gt;但平时工作忙，尽管每天都坚持挤出一到两个小时的读书时间（牺牲睡眠时间），但读书时间与要读书的意愿上一直存在着矛盾，这意味着我需要高效率地读书。而我想，我的阅读能力可能得益于《如何阅读一本书》，一本讲“元阅读”的书。这本书第一版出版是1940年，到今天还被很多人拿来读，可见此书称得上是经典了。&lt;/p&gt;
&lt;p&gt;对此，我对这本书的内容稍作总结，希望能对同样爱读书的你，同样有帮助。&lt;/p&gt;
&lt;h2 id=&quot;主动阅读&quot;&gt;主动阅读&lt;/h2&gt;&lt;p&gt;当然，严格上来说，不存在完全被动的阅读。阅读越主动，效果很好。这个读者比另一个读者更主动一些，他在阅读世界里面的探索能就更强一些，收获更多一些，因而也更高明一些。读者对他自己，以及自己面前的书籍，要求阅读，获得的就越多。&lt;/p&gt;
&lt;p&gt;同时，主动阅读，更多的地意味着你需要读更多超过你能力范围的书，因为只有读超过自身能力范围的书，通过阅读过程中的不断思考与磨砺，你才能真正增进你的理解力和阅读能力，而完全在你能力范围内的书，只是让你获取更多资讯而已，而资讯的获取，在这个资讯如此发达的时代，你有太多的办法来获取。关于这一点，Justin作为一个关注“上层建筑”的程序员，去年在读《深入理解计算机系统》一书时，有很深刻的体会。此书，对当时的我来说，完全超越我在计算机技术上的认知能力，我花了很大的耐心，反复磨砺，寻找各种理解的方式，才将这书基本读完（暂时性的读完，还要不断重读）。但读完后，我发现我获取的不只是对更多计算机原理知识，而是更为深刻的计算机设计和架构的思想，更关键的是，我获得了驾驭这类书籍的信心于能力，这是平常在读一本《×××计算机语言》之类的书时获取不到的。&lt;/p&gt;
&lt;h2 id=&quot;分层次阅读&quot;&gt;分层次阅读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一层次：基础阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初步的阅读能力和阅读技巧，也应该是读者都基本具备的层次。达到这阶段，只要求你能辨识书中的文字即可，即摆脱了文盲状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二层次：检视阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检视阅读，才算是真正进入了阅读的层次，但当然，只有你必须是精通了基础阅读，比如现在，让你读一本外文书，你可能就进入不了这个层次。&lt;br&gt;对于检视阅读一般分成两种：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;有系统的略读与粗读&lt;/em&gt;&lt;br&gt;可以通过以下几个方法来略读：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先看书名，然后有序就先看序。要明白一点，书名和序，肯定作者花费心思最多的地方，通过阅读它们，你基本可以对一本书进行&lt;em&gt;归类&lt;/em&gt;了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;研究目录页。一个好的目录，可以助你对书的基本架构有概括性的了解，就像出发前，要先看一下地图一样。但是并不是每一本书的目录都是能设计好的。Justin曾经读过一本书叫《算法谜题》，它的目录居然是将100道算法题索引出来，而没有任何的归类于串联，后来，我也就基本断定这书，就是一本算法集锦而已，作者的思维本身就是混乱的，只能给它打上“浪费时间”的标签了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从目录里挑选几个看起来跟主题相关的篇章来读读。对于这一点，我最喜欢的就是读开头和结尾，因为万事开头难，作者要开始写一本书，肯定需要深思熟虑，尽快地抛出作者自己的观点，抓住读者。而结尾呢，作者一般会作出观点的总结。如果发现作者的观点，完全在那你理解范围之类，我觉得没有很多必要读下去了，因为要铭记，只有“主动阅读”超越自己能力和理解的书，才能让你获得成长。当然，纯粹位获取知识，除外！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读读书的封面和包装。这上面一般都有出版者的话，或者作者的其它相关书籍的介绍，在这些“面包屑”里，你或许可以发现新的”珍珠“呢。我超爱干这事，经常在这里面，发现新的值得一读的书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;粗浅的阅读&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;有难度的书，或者超越你能力范围的书，肯定不是易读的书。但如果要驾驭它，你需要先“粗读”，即在第一次读一本难读的书时，从头到尾先读一遍，碰到不懂的地方也不要停下来查询或者思索。完整地读一遍之后的了解，即使你只掌握了50%甚至更少，也能帮助你在后来重读第一次略过的部分时，增进理解。就算不重读，对一本难度很高的书了解了一半，也比什么都不了解要好——如果你在一碰上困难的地方就停住，最后可能对这本书真的一无所知了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三层次：分析阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阅读的第三个层次就是分析阅读，也是最重要的层次。分析阅读包括以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解书的内容 &lt;/li&gt;
&lt;li&gt;明白书到底在说什么&lt;/li&gt;
&lt;li&gt;评论一本书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于以上三个方面，作者列出了几条基本规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;你一定要知道自己在读的哪一类书，而且越早知道越好。最好早在你开始阅读之前就先知道。&lt;/em&gt;&lt;/strong&gt; 关于这一条规则，我倒是要提醒特别提醒那些喜欢给人荐书的朋友，如果你推荐一本书出去，你最好能先告知将要读这本书的人，这是一本什么类的书，这样读者才能按自己兴趣与认知，来尽快作出读或者不读的判断，或者选择相应的读法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;使用一个单一的句子，或者最多几句话来叙述整本书的内容。&lt;/em&gt;&lt;/strong&gt; 对于整体内容，光是一个模糊的认知是不够的，而判断你是否确切清楚整体内容，唯一判断的办法就是，你能不能用几句话来表达清楚。如果几句话表达不出来，或者要用更多的话来表达，代表你还没有将整体的内容看清楚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体的架构。&lt;/em&gt;&lt;/strong&gt; 于建筑设计，软件系统设计一样，可读性最高的书肯定达到了最完整的整体架构的程度。最好的书都有最睿智的架构。比如《史记》,可以轻易地将它分成12本纪，70列传，30世家，10表，8书，而本纪是全书的提纲，所以对于读者，先肯定要能通读所有的本纪系列，而后可在列传和世家里选择一些感兴趣的来读，而当读者对人物世系需要更多了解，就可以多去看看表。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找出作者在问的问题，或作者想要解决的问题&lt;/p&gt;
&lt;p&gt;一本书的作者在开始写作时，都是有一个问题或一连串的问题，而这本书的内容就是一个答案，或许多答案。而技巧高超的作者，会用艺术的手段，将问题和答案都隐藏起来，作为读者，最大的义务就是找出问题和答案。这个寻找的过程，也是读者理解力和阅读能力获得最大成长的手段之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四层次：主题阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主题阅读是读书的最高层次，或称为最高目标。所谓主题阅读指的是，为了学习和理解某个特定的主题时，牵涉到的往往不只是一本书，而是需要去读一系列的书来研究和对比，从不同的书中相互补充观点，形成自己对这一主题的知识系统。&lt;/p&gt;
&lt;p&gt;做到主题阅读的层次，第一要求就是必须承认某一个主题读一本书是不够的，第二个要求则是，需要知道应该读那些书，而很明显，往往第二个要求比较难以达成。Justin本人对于这一点上经验还不是很多，毕竟不是专职搞研究的，平常对于某一主题的扩展阅读，大多数还是来自书籍本身的“面包屑”，比如前面说过的，书籍封面和序言里提到的同一作者的其它书籍。同时，一本优秀的书里，作者为了证明自己的观点，肯定也是旁征博引的，所以，作者在书中提到的这些相关书籍就是发掘宝藏的号地方。这在读Brooks教授（同时也是《人月神话》的作者）的《设计原本》时，我就大有体会。Brooks教授在它的书里，引用了很多其它经典书籍，也由此看出一位优秀的作者，肯定读破万卷书的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;读书是一种习惯，一种技巧，更是一门艺术。读书不只是为了获取资讯，更是为了增进理解力，从而更好的理解世界。一个人读书，只是将文字逐字逐句地阅读一遍往往是不够的，那顶多只能称之为消遣。一个人只是读自己理解了的书也是不够的，因为那样获取不到理解力的增长。而《如何阅读一本书》一书，教会我们的就是，如何“读懂”一本书，并在读的过程中获得成长。​&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我好读书，读的很繁杂，从计算机技术到历史到国学和哲学，系统方法论等都是我爱好读的。&lt;br&gt;但平时工作忙，尽管每天都坚持挤出一到两个小时的读书时间（牺牲睡眠时间），但读书时间与要读书的意愿上一直存在着矛盾，这意味着我需要高效率地读书。而我想，我的阅读能力可能得益于《如何阅读一
    
    </summary>
    
    
      <category term="学习" scheme="http://sharecore.net/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常识" scheme="http://sharecore.net/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="读书" scheme="http://sharecore.net/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce的变体:HashFold介绍</title>
    <link href="http://sharecore.net/2014/03/17/MapReduce%E7%9A%84%E5%8F%98%E4%BD%93-HashFold%E4%BB%8B%E7%BB%8D/"/>
    <id>http://sharecore.net/2014/03/17/MapReduce的变体-HashFold介绍/</id>
    <published>2014-03-16T16:09:01.000Z</published>
    <updated>2015-03-16T16:33:26.000Z</updated>
    
    <content type="html">&lt;p&gt;说到MapReduce计算模型大家应该都清楚。今天我们来看一下MapReduce一个变体：HasFold。&lt;/p&gt;
&lt;p&gt;这种模型将MapReduce中一些没有细化的部分，如Map后数据如何排序再进行Reduce等，通过Hash表这一数据结构的性质做了清晰的描述。&lt;/p&gt;
&lt;p&gt;HashFold模型的大概过程大概是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map过程在接收原始数据之后，将数据生成key-value对。&lt;/li&gt;
&lt;li&gt;对于key重复的value，会将两个重复的value传给Fold过程，Fold过程会返回一个新值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是MapReduce中典型示例：计算文件中的单词个数的实现（Go）&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;regexp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Pair &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	key   &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	count &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fname := &lt;span class=&quot;string&quot;&gt;&quot;README&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash := Start(fname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; hash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;word:%s,count:%d\n&quot;&lt;/span&gt;, k, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Start(fname &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bytes, _ := ioutil.ReadFile(fname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	source := &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pairs := Map(source)&lt;span class=&quot;comment&quot;&gt;//调用Map分割输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; pairs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := hash[p.key]; !ok &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hash[p.key] = p.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//如果重复，调用Fold函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hash[p.key] = Fold(hash[p.key], p.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Map(source &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) []Pair &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pairs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]Pair, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr := strings.Split(source, &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	re := regexp.MustCompile(&lt;span class=&quot;string&quot;&gt;&quot;[\\pP‘’“”]&quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, line := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; arr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		newLine := re.ReplaceAllString(line, &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//替换标点符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, word := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; strings.Split(newLine, &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; word != &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				k := strings.ToLower(word)&lt;span class=&quot;comment&quot;&gt;//转换为小写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				pairs = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(pairs, *&amp;amp;Pair&amp;#123;key: k, count: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pairs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Fold(v1, v2 &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1 + v2&lt;span class=&quot;comment&quot;&gt;//次数相加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;说到MapReduce计算模型大家应该都清楚。今天我们来看一下MapReduce一个变体：HasFold。&lt;/p&gt;
&lt;p&gt;这种模型将MapReduce中一些没有细化的部分，如Map后数据如何排序再进行Reduce等，通过Hash表这一数据结构的性质做了清晰的描述。&lt;/p&gt;

    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术常识" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF%E5%B8%B8%E8%AF%86/"/>
    
      <category term="算法" scheme="http://sharecore.net/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>防御性编程小例</title>
    <link href="http://sharecore.net/2014/01/13/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B%E5%B0%8F%E4%BE%8B/"/>
    <id>http://sharecore.net/2014/01/13/防御性编程小例/</id>
    <published>2014-01-12T16:06:36.000Z</published>
    <updated>2015-03-16T16:31:24.000Z</updated>
    
    <content type="html">&lt;p&gt;今天面试一个人时，突然想起一个话题：&lt;em&gt;防御性编程&lt;/em&gt; 。我们先看一个小程序，这也是以前出过的一道简单面试题：&lt;strong&gt;写一个函数，可以将一个小写字母转换为大写字母&lt;/strong&gt;。这道简单的题，完全写对的答案却少之又少。大部分答案是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      c=c-&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看似简单的答案，确实不完整的，或者说正好落入了题目本身的圈套。到此， 你或许看出了问题所在。对，问题就出现在参数c的取值判断上，最明显的就是当c小于32时，c-32小于0,返回值肯定不在字符取值范围内。所以，我们加上了判断：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c&amp;gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c=c-&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加上了对参数c判断，这就是防御性编程的第一步了。可惜，在这道题里，这也还是错误。如果我们传入67(‘C’)来调用toupper,返回的是35（’#’）,显然也是错误的。所以，我们的代码防御，应该将c的合法取值限制在一个更小的范围(小写字母集合)。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c&amp;gt;=&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; &amp;amp;&amp;amp; c&amp;lt;=&lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     c=c-&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，代码可以正确工作了。（最可惜的是，很多同学写的代码已经“进展”到下面这样了，却还没有发现c的取值范围应该限制为小写字母集合）&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c+=&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就是&lt;em&gt;防御性编程&lt;/em&gt;的最基本规则：保护程序免遭非法输入数据的破坏。&lt;/p&gt;
&lt;p&gt;或许你会比较乐观的认为，我的程序不会被非法输入来调用，当你这么想时，请参考一下&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%A2%A8%E8%8F%B2%E5%AE%9A%E5%BE%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;墨菲定律&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保护程序免遭非法输入数据的破坏,我们一般有以下几种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;检查所有来源于外部的数据的值：&lt;/strong&gt; 当从文件，用户或网络等外部接口获取数据时，应该检查所有输入的值，不要有任何庆幸，以确保它们在合法的范围之类。比如，对于数值，应该确保它的可接受范围（如非负数）;对于字符串，要确保它长度合法;对于更多的安全要求的，还要进行sql注入，html/xml注入等的检查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;检查子程序所有输入参数的值：&lt;/strong&gt; 这点与第一条类似，只是输入来源于程序内部，而不是外部。比如一个空指针，一个空对象的检查等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;决定如何处理错误的输入值&lt;/strong&gt;: 当你检查到程序的非法输入值后，要决定如何对这些非法值进行处理，是忽略还是抛出错误？要视情况而定，比如我们的toupper函数，忽略非法值输入是合理的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天面试一个人时，突然想起一个话题：&lt;em&gt;防御性编程&lt;/em&gt; 。我们先看一个小程序，这也是以前出过的一道简单面试题：&lt;strong&gt;写一个函数，可以将一个小写字母转换为大写字母&lt;/strong&gt;。这道简单的题，完全写对的答案却少之又少。大部分答案是这样的:&lt;/p&gt;
&lt;f
    
    </summary>
    
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术常识" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>对Go的Slice进行Append的一个坑</title>
    <link href="http://sharecore.net/2014/01/09/%E5%AF%B9Go%E7%9A%84Slice%E8%BF%9B%E8%A1%8CAppend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <id>http://sharecore.net/2014/01/09/对Go的Slice进行Append的一个坑/</id>
    <published>2014-01-08T16:10:45.000Z</published>
    <updated>2015-03-16T16:31:35.000Z</updated>
    
    <content type="html">&lt;p&gt;今天我们说说Go为数不多的一个“坑”。这个“坑”的代码是这样的：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr1 := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice1 := arr1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice1 = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice1, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;slice1:&quot;&lt;/span&gt;, slice1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;arr1:&quot;&lt;/span&gt;, arr1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr2 := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice2 := arr2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice2 = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice2, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;slice2:&quot;&lt;/span&gt;, slice2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;arr2:&quot;&lt;/span&gt;, arr2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码输出结果是：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go run sliceTrap.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice1: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] //神奇地，原数组被改变了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice2: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] //一切正常&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上结果发现，原来的arr1的值被“莫名”改变了，但arr2的值并没有改变，这貌似并不符合我们的预期。当然，这是Go代码的一个“坑”，我们写代码时需要特别注意避免。接下来，探讨一下这个“坑”的背后原因。&lt;/p&gt;
&lt;p&gt;首先，我们需要了解一个slice有三个基本组成元素：一个指向首元素的指针，一个长度值和一个容量值。我们可以下面这样的结构来表示slice。（go的内部类似实现可以在/src/pkg/runtime/runtime.h下查看）&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; slice &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Ptr *&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//指向分配的数组的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cap &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以调用make方法来创建一个slice&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]T, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;, [&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;]) []T&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过make方式的参数，可以看到，一个slice接收一个指定类型，一个指定长度和一个可选的容量参数。make方法调用后，它背后其实一样分配了一个指定类型的数组，并返回一个slice引用指向该数组。如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice：= &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注意：Go的默认零值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// slice == []int&amp;#123;0, 0, 0, 0, 0&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用make时，当cap参数未指定，那它的值与len相同。如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//len(slice)==5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cap(slice)==5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了以上两种方式创建slice，我们也可以采用对原slice或数组进行切片的方式来创建，如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arr := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s1 := arr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;//对数组进行切片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//len(s1)== 3 //len为切片开始位置到结束位置的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cap(s1)=4 //容量为原数组总长度减开始位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s2:=s1[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:] &lt;span class=&quot;comment&quot;&gt;//对slice进行切片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//len(s2)==1 //len为切片开始位置到结束位置的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cap(s2)==2 //容量为原slice总容量减开始位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一点需要特别了解，&lt;strong&gt;对slice进行切片操作，并不会新创建一个对象（分配内存），而只是在原来slice的基础上移动指针位置。&lt;/strong&gt;了解对一点，对我们结合下文，理解本文开头提到的“坑”有帮助。我们用下面的图来说明这一点，更好理解。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newslice:=slice[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/slicebug/slicing.png&quot; alt=&quot;slicing&quot;&gt;&lt;/p&gt;
&lt;p&gt;slice的容量值，限定了slice可容纳元素的最多个数，当我们往slice里添加新元素，导致元素个数超过容量时（len&amp;gt;cap）,则需要对slice进行扩容（Growing slices）。append方法的调用就是典型的扩容示例。我们来来模拟一下append方法的基本实现：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; AppendInt(slice []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, data ...&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n := m + &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断是否需要扩容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建新的slice，其实也就是开辟了一个新的内存空间，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//并返回了指向新地址的指针（一般会是增加为总需要长度的两倍，加1是为了防止n=0的情况）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newSlice := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, (n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//将旧的slice的元素值，copy到新创建的slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(newSlice, slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//关键的一步，slice重新指向新分配的slice，这也就是本文开头的例子里arr2的值没有变化的原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slice = newSlice &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    slice = slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//由于本步的copy操作，直接改变了原slice(如果没有重分配的话)里元素的值，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//所以导致了本文开头的例子里arr2的值的变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(slice[m:n], data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码，基本模拟了buitIn方法append的实现，具体的内部实现可以从Go的代码/src/pkg/runtime/slice.c里看到,也可以在文章最后附加内容里查看。&lt;/p&gt;
&lt;p&gt;通过上面的模拟append函数的代码可以看出，当append进来的元素个数会导致超出原slice的容量限制时会执行下面步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个容量更大的slice（扩容）。与对slice进行切片操作不同，这个slice是全新的，它的数组也是全新的，指针也是指向新数组的首位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新slice创建好后，会将原来被append的slice的元素内容进行值复制到新的slice。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将要被append元素，追加到新slice的末尾。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从以上几步可以看出，对slice进行扩容后追加元素，原slice的状态不会发生任何改变。这也就解释了本文开头的代码里，arr2的值，为什么没有发生变化。&lt;/p&gt;
&lt;p&gt;但与slice需要扩容不同的是，当原slice容量足够，不需要进行扩容时，那对slice元素的追加，都是发生在原slice里的（数组里），所以，原数组被“悄悄”改变了。这也解释了，为什么arr1的状态被改变了的原因。&lt;/p&gt;
&lt;p&gt;附：/src/pkg/runtime/slice.c runtime·appendslice函数代码&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; runtime·appendslice(SliceType *t, Slice x, Slice y, Slice ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	intgo m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	uintptr w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *pc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	uint8 *p, *q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m = x.len+y.len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	w = t-&amp;gt;elem-&amp;gt;size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m &amp;lt; x.len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runtime·&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;append: slice overflow&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m &amp;gt; x.cap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		growslice1(t, x, m, &amp;amp;ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(raceenabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Don&#39;t mark read/writes on the newly allocated slice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pc = runtime·getcallerpc(&amp;amp;t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// read x[:len]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m &amp;gt; x.cap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			runtime·racereadrangepc(x.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, x.len*w, w, pc, runtime·appendslice);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// read y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runtime·racereadrangepc(y.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, y.len*w, w, pc, runtime·appendslice);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// write x[len(x):len(x)+len(y)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m &amp;lt;= x.cap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			runtime·racewriterangepc(ret.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;+ret.len*w, y.len*w, w, pc, runtime·appendslice);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// A very common case is appending bytes. Small appends can avoid the overhead of memmove.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// We can generalize a bit here, and just pick small-sized appends.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p = ret.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;+ret.len*w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	q = y.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	w *= y.len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(w &amp;lt;= appendCrossover) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p &amp;lt;= q || w &amp;lt;= p-q) &lt;span class=&quot;comment&quot;&gt;// No overlap.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(w-- &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*p++ = *q++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p += w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			q += w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(w-- &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*--p = *--q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runtime·memmove(p, q, w);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret.len += y.len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FLUSH(&amp;amp;ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;growslice1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SliceType *t, Slice x, intgo newcap, Slice *ret)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	intgo m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m = x.cap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Using newcap directly for m+m &amp;lt; newcap handles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// both the case where m == 0 and also the case where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// m+m/4 wraps around, in which case the loop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// below might never terminate.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m+m &amp;lt; newcap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m = newcap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x.len &amp;lt; &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				m += m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				m += m/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(m &amp;lt; newcap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	makeslice1(t, x.len, m, ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime·memmove(ret-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, x.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, ret-&amp;gt;len * t-&amp;gt;elem-&amp;gt;size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们说说Go为数不多的一个“坑”。这个“坑”的代码是这样的：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
    
    </summary>
    
    
      <category term="Golang" scheme="http://sharecore.net/tags/Golang/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Golang的Slice机制解析</title>
    <link href="http://sharecore.net/2013/09/29/Golang%E7%9A%84Slice%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://sharecore.net/2013/09/29/Golang的Slice机制解析/</id>
    <published>2013-09-28T16:12:52.000Z</published>
    <updated>2015-03-22T08:52:37.000Z</updated>
    
    <content type="html">&lt;p&gt;Rob Pike写了篇关于Go的数组与切片的文章：&lt;a href=&quot;http://blog.golang.org/slices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arrays, slices (and strings): The mechanics of ‘append’&lt;/a&gt; ，介绍了slice的实现和一些常见的操作。其部分内容与我&lt;a href=&quot;http://sharecore.net/2014/01/09/%E5%AF%B9Go%E7%9A%84Slice%E8%BF%9B%E8%A1%8CAppend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;是重复的,所以就不一一翻译了，而是挑选部分内容记下，算是对我&lt;a href=&quot;http://sharecore.net/2014/01/09/%E5%AF%B9Go%E7%9A%84Slice%E8%BF%9B%E8%A1%8CAppend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 的一个内容补充。&lt;br&gt;对于以下内容的理解，首先需要理解&lt;a href=&quot;http://sharecore.net/2014/01/09/%E5%AF%B9Go%E7%9A%84Slice%E8%BF%9B%E8%A1%8CAppend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;提到的关于slice的结构定义，即可以用一个包含长度和一个指向数组的指针(当然还有容量)的struct来描述。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; sliceHeader &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Ptr *&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//指向分配的数组的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cap &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过以下方式来定义一个slice:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arr := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice:=arr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上slice其实等同于以下定义：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice:=sliceHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cap:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Ptr:&amp;amp;arr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;了解了以上的定义，我们再看几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将slice当做参数传递时，其实相当于&lt;strong&gt;值传递&lt;/strong&gt;了一个sliceHeader，这个sliceHeader包含了一个指向原数组的指针:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; AddOneToEachElement(slice []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slice[i]++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; SubtractOneFromLength(slice []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice := arr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//执行对元素+1的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Before Array:&quot;&lt;/span&gt;, arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AddOneToEachElement(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;After Array:&quot;&lt;/span&gt;, arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//执行长度切割操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Before: len(slice) =&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newSlice := SubtractOneFromLength(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;After:  len(slice) =&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;After:  len(newSlice) =&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(newSlice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Before Array: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After Array: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] //数组的值被相应的改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Before: len(slice) = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After:  len(slice) = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;//原来slice的长度并没有改变，说明slice参数是用的值传递&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After:  len(newSlice) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如果需要将slice当做引用传递，需要使用&lt;strong&gt;slice指针&lt;/strong&gt;。（&lt;strong&gt;其实，用指针来表示引用传递，几乎就是Go中指针的唯一作用了，Go并不支持指针运算等特性&lt;/strong&gt;）&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; PtrSubtractOneFromLength(slicePtr *[]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice := *slicePtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*slicePtr = slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice := arr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Before: len(slice) =&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PtrSubtractOneFromLength(&amp;amp;slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;After:  len(slice) =&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出结果：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Before: len(slice) = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After:  len(slice) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;//原来slice的长度发生变化，所以使用指针时，是引用传递&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于Cap字段的值，是由指针所指的数组的长度和来指定的。看以下代码，我们对一个slice进行扩展：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Extend(slice []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, element &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice = slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice[n] = element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice := arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slice = Extend(slice, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;panic: runtime error: slice bounds out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;goroutine &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [running]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/home/justinhuang/src/go/src/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;/slice1.go:&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面输出看到，当slice的长度达到数组长度(5)时，将出现越界的错误。&lt;/p&gt;
&lt;p&gt;当然，你也可以使用内置方法cap()来获取slice的容量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice) == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;slice is full!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串可以当做一个字节slice([]byte)来操作，&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slash := &lt;span class=&quot;string&quot;&gt;&quot;/usr/ken&quot;&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;//将得到字节值：&#39;/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;usr := &lt;span class=&quot;string&quot;&gt;&quot;/usr/ken&quot;&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 将得到字符串：&quot;/usr&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下可以将字符串反转为一个slice（[]byte）&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(usr)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;字符串的操作，在我实现的razor视图引擎里大量用到：&lt;a href=&quot;https://github.com/JustinHuang917/gof/blob/master/goftool/parser/razor/razorparser.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;razorparser.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多关于slice的make,copy，append操作，详见我&lt;a href=&quot;http://sharecore.net/2014/01/09/%E5%AF%B9Go%E7%9A%84Slice%E8%BF%9B%E8%A1%8CAppend%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Rob Pike写了篇关于Go的数组与切片的文章：&lt;a href=&quot;http://blog.golang.org/slices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arrays, slices (and strings): The mechani
    
    </summary>
    
    
      <category term="Golang" scheme="http://sharecore.net/tags/Golang/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统十问</title>
    <link href="http://sharecore.net/2013/08/25/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8D%81%E9%97%AE/"/>
    <id>http://sharecore.net/2013/08/25/Linux文件系统十问/</id>
    <published>2013-08-24T16:32:10.000Z</published>
    <updated>2016-06-26T07:36:51.000Z</updated>
    
    <content type="html">&lt;p&gt;今天读到&lt;a href=&quot;http://djt.qq.com/article/view/620&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章:Linux文件系统十问，你知道吗？&lt;/a&gt;，作了个总结笔记：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、机械磁盘随机读写时速度非常慢，操作系统是采用什么技巧来提高随机读写的性能的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 磁盘读写时间=寻道时间（找磁道）+盘面旋转时间（找扇区）+读／写时间，而旋转时间和读／写时间是常量，所以需要尽量缩短寻道时间。操作系统在分区时，按柱面的区域分区而不是盘面的区域分区，以缩短在同一个分区里连续读的寻道时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、touch一个新的空文件占用磁盘空间吗？ 占用的话占用多少？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个新的空文件会占用磁盘空间，占的大小为一个inode的size.inode的详细介绍可查看: &lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/inode.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解inode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、新建一个空目录占用磁盘空间吗？占用多少？和新建一个文件相比，哪个占用的更大？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建的空目录会占用磁盘空间，新目录会占用一个inode，同时分配一个block size（如4.0k）。&lt;br&gt;可如下方式查看空目录的大小。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ du -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;K    .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新建的文件，如果是空文件，不占用block。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ &amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ &amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总用量 &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwxr-x  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; justinhuang justinhuang &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; ./&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwxr-x &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; justinhuang justinhuang &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt; ../&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r--  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; justinhuang justinhuang    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r--  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; justinhuang justinhuang    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ du -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;K    .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、你知道文件名是记录在磁盘的什么地方吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件名的记录存在目录的block中，所以当空文件过多后（多于一个block大小），会使重新分配的目录的block。使目录占用空间变大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、文件名最长多长？受什么制约？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lunux文件名最长限制为255byte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、文件名太长了会影响系统性能吗？为什么会产生影响？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件名太长会导致文件名读取时花费更多的磁盘IO。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、一个目录下最多能建立多少个文件？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;受目录下inode的数量限制，但是文件太多，OS需要读取的block也增多。导致性能问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、新建一个内容大小1k的文件，实际会占用多大的磁盘空间？&lt;/strong&gt;&lt;br&gt;一个block size(一般为4.0k)+一个inode size(一般为256byte)。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总用量 &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwxr-x  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; justinhuang justinhuang &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; ./&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwxr-x &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; justinhuang justinhuang &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt; ../&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r--  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; justinhuang justinhuang    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;justinhuang@ubuntu:\~/temp/temp$ du -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;K    .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、向操作系统发起读取文件2Byte的命令，操作系统实际会读取多少呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件系统在向磁盘发起IO请求的时候，也是以block size为单位。所以会读取一个block size。这也是程序的局部性原理的应用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、我们使用文件时要怎么样来能提高磁盘IO速度？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建文件时，可以告诉OS你新建的文件大概需要的空间大小，以使OS尽量为文件分配连续的block，缩短寻道时间，提高读写性能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天读到&lt;a href=&quot;http://djt.qq.com/article/view/620&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章:Linux文件系统十问，你知道吗？&lt;/a&gt;，作了个总结笔记：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、机械磁盘
    
    </summary>
    
    
      <category term="Linux" scheme="http://sharecore.net/tags/Linux/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术常识" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>怎么写Go的基准测试</title>
    <link href="http://sharecore.net/2013/07/04/%E6%80%8E%E4%B9%88%E5%86%99Go%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <id>http://sharecore.net/2013/07/04/怎么写Go的基准测试/</id>
    <published>2013-07-03T16:38:31.000Z</published>
    <updated>2016-06-26T07:38:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Dave Cheney在他的blog写了一篇关于Go的基准测试编写的基本介绍(&lt;a href=&quot;http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;)。我以此为内容，整理输出内容。&lt;/p&gt;
&lt;p&gt;对自己编写package编写基准测试是必不可少的过程，尤其对于执行性能有重要影响的代码，更是需要。Go向来是以工具丰富而著称的，从代码格式调整，到单元测试，到&lt;a href=&quot;http://golang.org/doc/articles/race_detector.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;竞争检查&lt;/a&gt;，以及我们接下来要介绍的基准测试，都提供方便的工具给开发者。&lt;/p&gt;
&lt;p&gt;我们以Fibonacci函数来介绍。&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//fib.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func Fib(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; int) int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; &amp;lt; 2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Fib(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;-1) + Fib(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;-2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编写第一个benchmark testing:&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//fib\_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func BenchmarkFib10(b *testing.B) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 执行b.N 次Fib函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; := 0; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; &amp;lt; b.&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Fib(10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下几点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基准测试需要位于文件名为”｛packagename｝_test.go”的文件中，如这里的”fib_test.go”&lt;/li&gt;
&lt;li&gt;需要引入“testing”包&lt;/li&gt;
&lt;li&gt;基准测试函数需要以”Benchmark”为函数名的开头&lt;/li&gt;
&lt;li&gt;基准函数会执行许多遍。b.N的没次执行都会自增长，直到工具认为统计数据已经满足基准测试输出的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成以上代码，我们就可以调用工具执行测试了：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -bench=.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testing: warning: no tests to run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkFib10   &lt;span class=&quot;number&quot;&gt;2000000&lt;/span&gt;           &lt;span class=&quot;number&quot;&gt;835&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok      &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;/fib    &lt;span class=&quot;number&quot;&gt;2.522&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上结果的第一行和第二行结果是go test执行的结果。&lt;/li&gt;
&lt;li&gt;与go test相似，-bench flag可接收一个有效的正则表达式来执行符合条件的测试函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，也轻易通过以下代码扩展，得到多个测试基准的结果：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;benchmarkFib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i int, b *testing.B)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; n &amp;lt; b.&lt;span class=&quot;type&quot;&gt;N&lt;/span&gt;; n++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;type&quot;&gt;Fib&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;  &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;  &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;  &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib10&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt; &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib20&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt; &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkFib40&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt; &lt;/span&gt;&amp;#123; benchmarkFib(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, b) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;500000000&lt;/span&gt;            &lt;span class=&quot;number&quot;&gt;7.81&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib2&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;100000000&lt;/span&gt;           &lt;span class=&quot;number&quot;&gt;18.4&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib3&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;100000000&lt;/span&gt;           &lt;span class=&quot;number&quot;&gt;24.9&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib10&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;          &lt;span class=&quot;number&quot;&gt;1269&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib20&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;        &lt;span class=&quot;number&quot;&gt;109198&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;BenchmarkFib40&lt;/span&gt;         &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;1780678179&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok      test/fib    &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;.852s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个测试的运行最小运行时间默认是1s，如果测试返回结果时，运行时间还没达到1s，b.N将以1, 2, 5, 10, 20, 50, … 的序列递增，然后重新运行测试代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意上面的结果中，BenchmarkFib40只运行了一次，这是由于它的执行太慢。为了得到更大的样例数据，你可以通过设置最小运行时间来达到。设置-benchtime flag的即可。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;  -bench=Fib40 -benchtime=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkFib40        &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;1711313264&lt;/span&gt; ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok      &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;/fib    &lt;span class=&quot;number&quot;&gt;18.989&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特别注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于b.N是字增的，所以要谨慎用它来做函数参数。不要患下面这样的错误，否则，测试运行将没法终止。&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func BenchmarkFibWrong(b *testing.B) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; := 0; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; &amp;lt; b.&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Fib(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func BenchmarkFibWrong2(b *testing.B) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Fib(b.&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Dave Cheney在他的blog写了一篇关于Go的基准测试编写的基本介绍(&lt;a href=&quot;http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
    
      <category term="Golang" scheme="http://sharecore.net/tags/Golang/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>春秋五霸之首——齐桓公的故事</title>
    <link href="http://sharecore.net/2013/06/29/%E6%98%A5%E7%A7%8B%E4%BA%94%E9%9C%B8%E4%B9%8B%E9%A6%96%E2%80%94%E2%80%94%E9%BD%90%E6%A1%93%E5%85%AC%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://sharecore.net/2013/06/29/春秋五霸之首——齐桓公的故事/</id>
    <published>2013-06-28T16:07:47.000Z</published>
    <updated>2015-03-16T16:34:36.000Z</updated>
    
    <content type="html">&lt;p&gt;昨晚重新翻阅了《史记·齐太公世家》，今天就跟大家重新说说春秋五霸之首齐桓公姜小白的故事吧。&lt;/p&gt;
&lt;p&gt;在说齐桓公这位“明君”的故事前，我们得先说点“恶心”的事，是关于齐桓公的上一位国君姜储儿齐襄公的。姜储儿是姜小白的哥哥，此人是一个冥顽不灵又一意孤行的庸君，他做过的最恶心的一件事情莫过于是跟他的妹妹文姜乱伦通奸了。当年，文姜嫁给了鲁国的国君姬允。有一次，姬允带着文姜来到齐国访问，姜储儿和文姜这对狗男女，既然趁此机会，重温旧梦。这时，姬允发现了两人的奸情，非常生气，并马上辞行回国。而姜储儿知道丑行败露，想杀死姬允了事。于是，他找机会把姬允灌醉，派了一个叫彭生的大力士把姬允杀死了。&lt;/p&gt;
&lt;p&gt;姬允被杀死，鲁国人也明知道内情是什么样的，但苦于军事力量太弱，不管把齐国怎么样，只是谴责下。姜储儿为了封口，一不做二不休地将彭生也一并杀了。尽管此事死无对证了，但姜储儿的两位弟弟姜纠和姜小白感觉到了不详的气息，于是纷纷逃亡。姜纠带着他的智囊管仲逃到了鲁国，他的生母是鲁国人。姜小白带着他的智囊鲍叔牙投奔到了莒国（今山东莒县）。&lt;/p&gt;
&lt;p&gt;彭生死后几年，有一次姜储儿去打猎，发现了一只野猪，他连射几箭都没有杀死它。这时，他的随从大喊一声：“是彭生！”。姜储儿立马吓得魂不附体，从马上摔了下来。等到救起他时，发现他的一只鞋子不见了。当晚就发生军事叛变，当叛军正找不到躲起来的姜储儿时，正好在暗道中发现了这只鞋子，于是抓到了姜储儿，并把他杀了。一个昏君，就这样罪有应得的死于叛军之首。叛军立姜储儿的堂弟姜无知为君，不久，又发生政变，姜无知也被杀掉了。&lt;/p&gt;
&lt;p&gt;这时，远在鲁国的姜纠和莒国的姜小白听到了这个消息，立马由鲁国和莒国的军队护送回国，两人商定，谁先回到齐国首府临缁谁就当国君。姜纠的智囊管仲，害怕姜小白会先到，于是，快马加鞭的赶上姜小白，向他射出一箭。可此箭并没有射中姜小白，只是中了他腰上的铜扣，姜小白怕他再射一箭，于是超级聪明的故意栽倒。管仲却聪明一世糊涂一时，以为姜小白死了，于是放心的逃走了。等姜纠和管仲赶到临缁，却发现姜小白早已登上了宝座。&lt;/p&gt;
&lt;p&gt;故事的发展，按常人的理解，肯定是姜纠和管仲都非死不可。但历史就是历史，它要成就一段霸业，必将发生一些不寻常的事情。这种不寻常的事情，曾多次的在立一个新的霸业时发生，以后我们再慢慢说。&lt;/p&gt;
&lt;p&gt;姜小白当上国君后，姜纠不服，率鲁国军队进攻齐国。可凭鲁国那点军事力量，哪是齐国的对手？马上被打败，于是鲁国只好求和。姜小白给出的求和条件是：杀死姜纠，缚送管仲。鲁国只好答应，杀死了姜纠，用囚车缚送管仲到临缁，在所有人以为管仲将被报仇羞辱然后死无全尸之时，故事来了大转弯。原来是因为姜小白的智囊鲍叔牙看重管仲的才能，向姜小白竭力推荐管仲当宰相。姜小白一生中第二次重要的选择，就是宽容地听取了鲍叔牙的建议，接纳了管仲，把他从囚车放出，立他为相。&lt;/p&gt;
&lt;p&gt;管仲的才能不是盖的，他当相后组织齐国改革，提出“尊王攘夷”的口号，为齐国在当时赢得了良好的政治口碑。经济上开放商业，并利用渔业，盐业（齐地临海），给瞻贫民，奖励贤能，齐桓公霸业终成，立“五霸”之首。我们与其说这是齐桓公的霸业，倒不如说是管仲的霸业。或者说，齐桓公只是一个躯壳，管仲才是灵魂。&lt;/p&gt;
&lt;p&gt;尽管，管仲对霸业的功劳居功至伟，但我们也不得不无比称赞齐桓公生平的最明智的两次选择。一是佯死保命，充分体现了他的机智；而是原谅管仲，体现了他的宽容之心。&lt;/p&gt;
&lt;p&gt;但是，大家也应该注意到，这种建立在某一位超强贤能之人之上的霸业是很不稳定的。当这位贤能之人离开或逝去后，根基和灵魂同样也就坍塌。&lt;/p&gt;
&lt;p&gt;公元前645年，管仲逝世。&lt;/p&gt;
&lt;p&gt;管仲病危时，警告齐桓公，不能信任他的三位亲信：竖刀，易牙，卫开方。&lt;br&gt;这三人，应该是历史上拍马屁的典范了。竖刀是一个太监，他本来不是太监，为了亲近伺候齐桓公，自愿接受宮刑。易牙是一位厨师，有一天齐桓公跟他说：“什么肉我都吃过，就是没有吃过人肉，不知道是什么味道？”当天晚上，就有一份异常美味的肉给他品尝，齐桓公大大赞赏了他，易牙说：“这是我三岁儿子的肉，我特意奉献国君您”。卫开方是一位贵族，追随齐桓公15年，都没有回家。这三人的“忠诚”表演，齐桓公甚是感动。&lt;/p&gt;
&lt;p&gt;管仲给他分析说：“人性是这样的，没有人不爱自己的身体超过别人，如果自己身体都可以下毒手，还有什么不能下毒手的？没有人不爱自己的儿女，连自己的儿女都可以下狠心，还有什么不能下狠心？没有人不爱自己的父母，十五年不见自己的父母而抛到脑后，还有什么不能抛到脑后？” 可怜的齐桓公，偏偏这事上没有听从的管仲的。&lt;/p&gt;
&lt;p&gt;司马迁里对管仲的分析是这样描写的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;桓公问曰：“群臣谁可相者？”管仲曰：“知臣莫如君。” 公曰：“易牙如何？” 对曰：“杀子以适君，非人情，不可。” 公曰：“开方如何？” 对曰：“倍亲以适君，非人情，难近。”公曰：“竖刀如何？” 对曰:“自宫以适君，非人情，难亲。”管仲死，而桓公不用管仲言，卒近用三子，三子专权。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;后来，竖刀，易牙，卫开方这几人专政。桓公病重，这三人赶走原来的太子,拥立齐桓公的儿子姜无亏为太子。后，桓公的五个儿子相互争夺太子之位，桓公一死，连一个给他收尸的都没有，直到桓公的尸体在床上放了六十多天，尸体的蛆虫都爬出了窗户，才被当上国君的姜无亏收棺安葬。&lt;/p&gt;
&lt;p&gt;桓公死后，齐国的霸业也就此终止，前后不过40年的时间，甚为可惜。&lt;/p&gt;
&lt;p&gt;纵观齐桓公的一生，甚为精彩，聪明过，也糊涂过。刚刚我的老板也正好发了一条微信，说：平台，合作，团队，渠道，了解，心态，先天以及选择，没有一个不是重要的。这一些，不也都体现在了桓公和管仲的这个故事里吗？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;昨晚重新翻阅了《史记·齐太公世家》，今天就跟大家重新说说春秋五霸之首齐桓公姜小白的故事吧。&lt;/p&gt;
&lt;p&gt;在说齐桓公这位“明君”的故事前，我们得先说点“恶心”的事，是关于齐桓公的上一位国君姜储儿齐襄公的。姜储儿是姜小白的哥哥，此人是一个冥顽不灵又一意孤行的庸君，他做过的最恶
    
    </summary>
    
    
      <category term="历史" scheme="http://sharecore.net/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="春秋" scheme="http://sharecore.net/tags/%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go并发编程模式进阶</title>
    <link href="http://sharecore.net/2013/06/10/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6/"/>
    <id>http://sharecore.net/2013/06/10/Go并发编程模式进阶/</id>
    <published>2013-06-09T16:09:57.000Z</published>
    <updated>2016-06-26T07:33:50.000Z</updated>
    
    <content type="html">&lt;p&gt;前段时间Google的&lt;a href=&quot;http://profiles.google.com/ajmani&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sameer Ajmani&lt;/a&gt;在Google I/O上做了关于Go的并发模式的介绍。Slides&lt;a href=&quot;http://talks.golang.org/2013/advconc.slide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在此&lt;/a&gt;,youtube视频&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=QDDwwePbDtw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在此&lt;/a&gt;(注：上述链接均需翻墙)。&lt;/p&gt;
&lt;p&gt;本篇的前提是对goroutine+channel的并发编程模式有基本的了解，建议能读懂下面这个经典ping-pong程序为好。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义一个结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Ball &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123; hits &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//创建一个可传输Ball的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Ball)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//分别启动ping/pong的goroutine &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; Player(&lt;span class=&quot;string&quot;&gt;&quot;Ping&quot;&lt;/span&gt;, table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; Player(&lt;span class=&quot;string&quot;&gt;&quot;Pong&quot;&lt;/span&gt;, table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//一个Ball进入channel，游戏开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table &amp;lt;- &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Ball)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//“主”程序暂停1s,等待ping/pong的goroutine执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//从channel取出Ball，游戏开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;-table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//可通过引发异常，显示调用栈的详细信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//panic(&quot;show me the stacks&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Player(name &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, table &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Ball) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//channel取出Ball，并hits++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ball := &amp;lt;-table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ball.hits++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(name, ball.hits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//暂停1ms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//将Ball放回channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    table &amp;lt;- ball&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ping-pong程序的执行过程，可以用下图来表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/advgoroutine/pingpong.png&quot; alt=&quot;ping-pong程序执行过程&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来主要说说Go的并发编程里的一些“文艺”使用:如何通信?如何周期性处理事件？如何取消执行？这些高级用法的支持，除了依赖我们上面看到的goroutine+channel外，还要依赖于Go的一个statement：select+case。它可以用来管理和监听多个channel,从而起到“多路复用”的效果。他的基本语法如下。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xc &amp;lt;- &lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 向channel(xc)发送一个对象(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;y :&lt;/span&gt;= &amp;lt;-&lt;span class=&quot;string&quot;&gt;yc:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 从channel(yc)获取一个对象并赋值到变量(y)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面我们以一个能持续从RSS获取资源项的例子来说明select的使用。&lt;br&gt;假设我们已经拥有下面这个接口所定义的功能：从一个RSS url获取资源项目(一次调用，获取一次,这个接口的模拟实现，见附1。)&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Fetcher&lt;/span&gt; interface &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Fetch&lt;/span&gt;() (&lt;span class=&quot;title&quot;&gt;items&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Time&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;)//能从某个&lt;span class=&quot;title&quot;&gt;rss&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;url&lt;/span&gt;获取它的资源项，并能同时返回下一次获取的时间&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`我们用下面这个接口来表示我们希望达到的功能：能从rss url上循环获取资源项，形成资源流的形式；循环获取功能，可以中止。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Subscription&lt;/span&gt; interface &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Updates&lt;/span&gt;() &amp;lt;-&lt;span class=&quot;title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;//用&lt;span class=&quot;title&quot;&gt;channel&lt;/span&gt;来存放资源，即可实现流的显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;//关闭获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先看一个这项功能的简单实现，熟悉多线程编程的，应该觉得很眼熟。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; NavieSub &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed  &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err     error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher Fetcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) Close() error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s.closed = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//设置关闭标识为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) Updates() &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.updates&lt;span class=&quot;comment&quot;&gt;//返回已经获取的资源项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) loop() &amp;#123;&lt;span class=&quot;comment&quot;&gt;//循环获取的方法实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.closed &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断关闭标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(s.updates)&lt;span class=&quot;comment&quot;&gt;//close是内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    items, next, err := s.fetcher.Fetch()&lt;span class=&quot;comment&quot;&gt;//执行一次获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.err = err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//出错时暂停10秒后再开始下次循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; items &amp;#123;&lt;span class=&quot;comment&quot;&gt;//将获取的资源项写入，用于返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.updates &amp;lt;- item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now := time.Now(); next.After(now) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//暂停到下次获取时间时，再开始下一次获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.Sleep(next.Sub(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;sharecore.info&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s := &amp;amp;NavieSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; s.loop()&lt;span class=&quot;comment&quot;&gt;//启动一个例程执行loop方法（与启动一个线程类似）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.AfterFunc(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*time.Second, &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;closed&quot;&lt;/span&gt;, s.Close())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s.Updates() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(item.Channel, item.Title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;`那以上的简单实现，会有什么问题呢？&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;明显发现s.err和s.closed的访问是非同步的。&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s.closed = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//设置关闭标识为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.closed &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断关闭标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(s.updates) &lt;span class=&quot;comment&quot;&gt;//close是内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`然后，我们看到s.updates的定义如下:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s := &amp;amp;NavieSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item),&lt;span class=&quot;comment&quot;&gt;//定义为没有buffer的channel，一个channel中同时只能有一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`根据上面的定义，s.updates一次只能有一个item进入，当它没有其他goroutine从它里面取出元素时，下面这行代码会&lt;strong&gt;发生堵塞&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s&lt;span class=&quot;class&quot;&gt;.updates&lt;/span&gt; &amp;lt;- item&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`那以上问题我们有什么办法来避免呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于第一个问题，自然想到的解决办法是加锁，但加锁的方式太不符合Go的“口味”了，同时，加锁的方式，在面对比较复杂的并发场景时，容易导致各类由“锁”引发的问题，这也是线程模型的“恶魔”了。&lt;/p&gt;
&lt;p&gt;对于第二个问题，普通的办法时当然是将s.updates定义为一个带buffer的channel。但是buffer定义为多大才合适呢？当取出元素的routine太慢，还是一样可能会导致buffer满了，发生堵塞。&lt;/p&gt;
&lt;p&gt;下面，我们来看看如何用一个比较“文艺”的办法来解决上面的问题吧。前面我们提到的select这时可以派上用场了。select的机制实现，差不多可以称为是“事件驱动”的，当然这里的“事件”并不是我们平常其他的事件驱动模型里常看到的I/O，网络请求／响应这样的“事件”，而是监听channel变更的“事件”。&lt;/p&gt;
&lt;p&gt;将select与for循环结合起来，可以构造持续监听channel的结构，如下：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func(s *AdvSub) loop()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//可变状态的定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//设置不同的channel的监听case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    select&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-&lt;span class=&quot;string&quot;&gt;c1:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;comment&quot;&gt;// 读／写状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-&lt;span class=&quot;string&quot;&gt;c2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;comment&quot;&gt;// 读／写状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;&amp;lt;-&lt;span class=&quot;string&quot;&gt;c3:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;comment&quot;&gt;// 读／写状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们先来看怎么利用for-select结构来解决第一个close同步的问题：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; AdvSub &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closing &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`如上代码所示，我们给sub定义，加了一个“状态”——closing,而我们就可以利用for-select结构来监听从closing的“状态变化”。&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;`&lt;span class=&quot;comment&quot;&gt;//close方法，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *AdvSub) &lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	errc:=make(chan &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	s.closing&amp;lt;-errc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;-errc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//错误状态信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		select&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	case errc:=&amp;lt;-s.closing&lt;span class=&quot;comment&quot;&gt;//当Close方法调用时会触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		errc&amp;lt;-&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//将错误信息放到Close返回的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;(s.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;采用这种方式，同步的实现是完全依赖且只依赖于channel的同步机制的，这是可以信赖的。&lt;/p&gt;
&lt;p&gt;对于第二个问题，我们可以给sub在加一个状态，比如队列，用来保持它已经获到的资源项。如下代码：&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pending []item&lt;span class=&quot;comment&quot;&gt;//存入新获取的资源(Fetch方法调时)，并同时被消费(Update()被调用，取出元素时)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; s.updates&amp;lt;-pending[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending=pending[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;span class=&quot;comment&quot;&gt;//取出后将第一个元素移除，更新状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可是你会发现，上面的代码这么修改后并不会如期的正常运行,而是出现如下的错误：&lt;br&gt;&lt;img src=&quot;/images/advgoroutine/updateserror.png&quot; alt=&quot;s.updates获取错误&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是因为，一开始pending数组是空的，当执行s.updates&amp;lt;-pending[0]时，会抛出数组越界的异常。&lt;br&gt;我们可以采取下面的方式来解决这个问题：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pending []item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; updates &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(pending) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        first = pending[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        updates = s.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; updates&amp;lt;-first:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending=pending[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面，我们通过for-select结构，解决了同步的问题和堵塞的问题。在NavieSub的loop实现中，我们发现有time.Sleep的调用，对于time.Sleep的模式，我们其实也可以通过for-select结构来解决，这得益于&lt;strong&gt;time包下的许多方法／状态，也提供了返回channel的方式来便于监听&lt;/strong&gt;，比如time.After(duration),time.Ticker等。所以我们就可以方便地将time.Sleep去掉，整合到for-select的结构中来&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pending []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetchDelay time.Duration &lt;span class=&quot;comment&quot;&gt;//下次获取的延迟时间，默认是0（无延迟）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now:=time.Now();next.After(now)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fetchDelay=next.Sub(now)&lt;span class=&quot;comment&quot;&gt;//计算延迟时间    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    startFetch:=time.After(fetchDelay)&lt;span class=&quot;comment&quot;&gt;//startFetch是一个channnel,时间到达后，会被写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case startFetch:&lt;span class=&quot;comment&quot;&gt;//到达下一次获取时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetched []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fetched,next,&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;=s.fetcher.Fetch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;!=nil&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            next=time.Now().Add(10*time.Sencond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pending=&lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;(pending,fetched...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于以上三种情况，我们总结起来的for-select实现代码就如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *AdvSub) loop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pending []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//综合了三种情况的for-select结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetchDelay time.Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now := time.Now(); next.After(now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fetchDelay = next.Sub(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    startFetch := time.After(fetchDelay)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; updates &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(pending) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        first = pending[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        updates = s.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; errc := &amp;lt;-s.closing:&lt;span class=&quot;comment&quot;&gt;//关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        errc &amp;lt;- err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(s.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-startFetch:&lt;span class=&quot;comment&quot;&gt;//获取资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetched []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fetched, next, err = s.fetcher.Fetch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            next = time.Now().Add(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(pending, fetched...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; updates &amp;lt;- first:&lt;span class=&quot;comment&quot;&gt;//取出资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending = pending[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，分别附上Fetcher接口的模拟实现，以及普通方式和for-select结构方式的完整实现代码。&lt;/p&gt;
&lt;h2 id=&quot;附1：Fetcher接口的一个实现&quot;&gt;附1：Fetcher接口的一个实现&lt;/h2&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type Item struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Title, Channel, GUID &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type FakeFether struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt;   []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (f *FakeFether) Fetch() (&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt; []Item, next &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;.Time, err error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	now := &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	next = now.Add(&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;.Duration(rand.Intn(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)) * &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt; := Item&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Channel: f.channel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Title:   fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;Item %d&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(f.&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;.GUID = &lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;.Channel + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;.Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt; = append(f.&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;items&lt;/span&gt; = []Item&amp;#123;&lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附2:普通方式完整实现&quot;&gt;附2:普通方式完整实现&lt;/h2&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Item struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Title, Channel, GUID &lt;span class=&quot;literal&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Fetcher interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Fetch() (tems []Item, next time.Time, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Subscription interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Updates() &amp;lt;-chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FakeFether struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel &lt;span class=&quot;literal&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	items   []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (f *FakeFether) Fetch() (items []Item, next time.Time, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	now := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	next = now.Add(time.Duration(rand.Intn(5)) * 500 * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	item := Item&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Channel: f.channel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Title:   fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;Item %d&quot;&lt;/span&gt;, len(f.items)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	item.GUID = item.Channel + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + item.Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.items = &lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;(f.items, item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	items = []Item&amp;#123;item&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; NaiveSub struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed  bool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher Fetcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *NaiveSub) &lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s.closed = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *NaiveSub) Updates() &amp;lt;-chan Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *NaiveSub) loop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.closed &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;(s.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    items, next, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; := s.fetcher.Fetch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.&lt;span class=&quot;keyword&quot;&gt;Sleep&lt;/span&gt;(10 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; items &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.updates &amp;lt;- item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now := time.Now(); next.After(now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.&lt;span class=&quot;keyword&quot;&gt;Sleep&lt;/span&gt;(next.Sub(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; NaiveMerge struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subs    []Subscription&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; *NaiveMerge) &lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() (&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, sub := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.subs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; := sub.&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;(); &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; == nil &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; *NaiveMerge) Updates() &amp;lt;-chan Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func &lt;span class=&quot;keyword&quot;&gt;Merge&lt;/span&gt;(subs ...Subscription) Subscription &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; := &amp;amp;NaiveMerge&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    subs:    subs,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: make(chan Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, sub := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; subs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    go func(s Subscription) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; it := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s.Updates() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates &amp;lt;- it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;(sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func Subscripbe(fetcher Fetcher) Subscription &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s := &amp;amp;NaiveSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: make(chan Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	go s.loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher1 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;sharecore.info&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher2 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;blog.golang.org&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher3 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;googleblog.blogspot.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher4 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;googledevelopers.blogspot.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; := &lt;span class=&quot;keyword&quot;&gt;Merge&lt;/span&gt;(Subscripbe(fetcher1), Subscripbe(fetcher2), Subscripbe(fetcher3), Subscripbe(fetcher4))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.AfterFunc(3*time.Second, func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;closed:&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.Updates() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(item.Channel, item.Title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	panic(&lt;span class=&quot;string&quot;&gt;&quot;show me the stacks&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附3:for-select结构的完整实现&quot;&gt;附3:for-select结构的完整实现&lt;/h2&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//  &quot;errors&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Item struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Title, Channel, GUID &lt;span class=&quot;literal&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Fetcher interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Fetch() (tems []Item, next time.Time, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Subscription interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;Update&lt;/span&gt;() &amp;lt;-chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FakeFether struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel &lt;span class=&quot;literal&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	items   []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (f *FakeFether) Fetch() (items []Item, next time.Time, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	now := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	next = now.Add(time.Duration(rand.Intn(5)) * 500 * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	item := Item&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Channel: f.channel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Title:   fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;Item %d&quot;&lt;/span&gt;, len(f.items)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	item.GUID = item.Channel + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + item.Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.items = &lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;(f.items, item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	items = []Item&amp;#123;item&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; AdvSub struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed  bool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher Fetcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closing chan chan &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *AdvSub) &lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	errc := make(chan &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s.closing &amp;lt;- errc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; := &amp;lt;-errc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *AdvSub) &lt;span class=&quot;keyword&quot;&gt;Update&lt;/span&gt;() &amp;lt;-chan Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s *AdvSub) loop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pending []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetchDelay time.Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now := time.Now(); next.After(now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fetchDelay = next.Sub(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    startFetch := time.After(fetchDelay)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; updates chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(pending) &amp;gt; 0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        first = pending[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        updates = s.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    case errc := &amp;lt;-s.closing:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        errc &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;(s.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    case &amp;lt;-startFetch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fetched []Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fetched, next, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = s.fetcher.Fetch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            next = time.Now().Add(10 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending = &lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;(pending, fetched...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    case updates &amp;lt;- first:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        pending = pending[1:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; NaiveMerge struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subs    []Subscription&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates chan Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; *NaiveMerge) &lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;() (&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, sub := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.subs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; := sub.&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;(); &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; == nil &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; *NaiveMerge) &lt;span class=&quot;keyword&quot;&gt;Update&lt;/span&gt;() &amp;lt;-chan Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func &lt;span class=&quot;keyword&quot;&gt;Merge&lt;/span&gt;(subs ...Subscription) Subscription &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; := &amp;amp;NaiveMerge&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    subs:    subs,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: make(chan Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, sub := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; subs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    go func(s Subscription) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; it := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s.&lt;span class=&quot;keyword&quot;&gt;Update&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.updates &amp;lt;- it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;(sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func Subscripbe(fetcher Fetcher) Subscription &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s := &amp;amp;AdvSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: make(chan Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    closing: make(chan chan &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	go s.loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher1 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;sharecore.info&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher2 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;blog.golang.org&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher3 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;googleblog.blogspot.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher4 := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;googledevelopers.blogspot.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; := &lt;span class=&quot;keyword&quot;&gt;Merge&lt;/span&gt;(Subscripbe(fetcher1), Subscripbe(fetcher2), Subscripbe(fetcher3), Subscripbe(fetcher4))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.AfterFunc(3*time.Second, func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;closed:&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Close&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Update&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(item.Channel, item.Title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//panic(&quot;show me the stacks&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间Google的&lt;a href=&quot;http://profiles.google.com/ajmani&quot;&gt;Sameer Ajmani&lt;/a&gt;在Google I/O上做了关于Go的并发模式的介绍。Slides&lt;a href=&quot;http://talks.golang.org/2013/advconc.slide&quot;&gt;在此&lt;/a&gt;,youtube视频&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=QDDwwePbDtw&quot;&gt;在此&lt;/a&gt;(注：上述链接均需翻墙)。&lt;/p&gt;
&lt;p&gt;本篇的前提是对goroutine+channel的并发编程模式有基本的了解，建议能读懂下面这个经典ping-pong程序为好。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义一个结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Ball &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123; hits &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//创建一个可传输Ball的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Ball)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//分别启动ping/pong的goroutine &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; Player(&lt;span class=&quot;string&quot;&gt;&quot;Ping&quot;&lt;/span&gt;, table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; Player(&lt;span class=&quot;string&quot;&gt;&quot;Pong&quot;&lt;/span&gt;, table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//一个Ball进入channel，游戏开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table &amp;lt;- &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Ball)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//“主”程序暂停1s,等待ping/pong的goroutine执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//从channel取出Ball，游戏开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;-table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//可通过引发异常，显示调用栈的详细信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//panic(&quot;show me the stacks&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Player(name &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, table &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Ball) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//channel取出Ball，并hits++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ball := &amp;lt;-table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ball.hits++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(name, ball.hits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//暂停1ms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//将Ball放回channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    table &amp;lt;- ball&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ping-pong程序的执行过程，可以用下图来表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/advgoroutine/pingpong.png&quot; alt=&quot;ping-pong程序执行过程&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来主要说说Go的并发编程里的一些“文艺”使用:如何通信?如何周期性处理事件？如何取消执行？这些高级用法的支持，除了依赖我们上面看到的goroutine+channel外，还要依赖于Go的一个statement：select+case。它可以用来管理和监听多个channel,从而起到“多路复用”的效果。他的基本语法如下。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xc &amp;lt;- &lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 向channel(xc)发送一个对象(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;y :&lt;/span&gt;= &amp;lt;-&lt;span class=&quot;string&quot;&gt;yc:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 从channel(yc)获取一个对象并赋值到变量(y)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面我们以一个能持续从RSS获取资源项的例子来说明select的使用。&lt;br&gt;假设我们已经拥有下面这个接口所定义的功能：从一个RSS url获取资源项目(一次调用，获取一次,这个接口的模拟实现，见附1。)&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Fetcher&lt;/span&gt; interface &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Fetch&lt;/span&gt;() (&lt;span class=&quot;title&quot;&gt;items&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Time&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;)//能从某个&lt;span class=&quot;title&quot;&gt;rss&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;url&lt;/span&gt;获取它的资源项，并能同时返回下一次获取的时间&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`我们用下面这个接口来表示我们希望达到的功能：能从rss url上循环获取资源项，形成资源流的形式；循环获取功能，可以中止。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Subscription&lt;/span&gt; interface &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Updates&lt;/span&gt;() &amp;lt;-&lt;span class=&quot;title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;//用&lt;span class=&quot;title&quot;&gt;channel&lt;/span&gt;来存放资源，即可实现流的显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;Close&lt;/span&gt;() &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;//关闭获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先看一个这项功能的简单实现，熟悉多线程编程的，应该觉得很眼熟。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; NavieSub &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed  &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err     error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	updates &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher Fetcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) Close() error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s.closed = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//设置关闭标识为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) Updates() &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.updates&lt;span class=&quot;comment&quot;&gt;//返回已经获取的资源项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s *NavieSub) loop() &amp;#123;&lt;span class=&quot;comment&quot;&gt;//循环获取的方法实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.closed &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断关闭标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(s.updates)&lt;span class=&quot;comment&quot;&gt;//close是内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    items, next, err := s.fetcher.Fetch()&lt;span class=&quot;comment&quot;&gt;//执行一次获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.err = err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//出错时暂停10秒后再开始下次循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; items &amp;#123;&lt;span class=&quot;comment&quot;&gt;//将获取的资源项写入，用于返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        s.updates &amp;lt;- item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; now := time.Now(); next.After(now) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//暂停到下次获取时间时，再开始下一次获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        time.Sleep(next.Sub(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fetcher := &amp;amp;FakeFether&amp;#123;channel: &lt;span class=&quot;string&quot;&gt;&quot;sharecore.info&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s := &amp;amp;NavieSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; s.loop()&lt;span class=&quot;comment&quot;&gt;//启动一个例程执行loop方法（与启动一个线程类似）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.AfterFunc(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*time.Second, &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;closed&quot;&lt;/span&gt;, s.Close())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s.Updates() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fmt.Println(item.Channel, item.Title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;`那以上的简单实现，会有什么问题呢？&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;明显发现s.err和s.closed的访问是非同步的。&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s.closed = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//设置关闭标识为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.closed &amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断关闭标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(s.updates) &lt;span class=&quot;comment&quot;&gt;//close是内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`然后，我们看到s.updates的定义如下:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s := &amp;amp;NavieSub&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    fetcher: fetcher,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    updates: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Item),&lt;span class=&quot;comment&quot;&gt;//定义为没有buffer的channel，一个channel中同时只能有一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`根据上面的定义，s.updates一次只能有一个item进入，当它没有其他goroutine从它里面取出元素时，下面这行代码会&lt;strong&gt;发生堵塞&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s&lt;span class=&quot;class&quot;&gt;.updates&lt;/span&gt; &amp;lt;- item&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;`那以上问题我们有什么办法来避免呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://sharecore.net/tags/Golang/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux Container的安装与使用介绍</title>
    <link href="http://sharecore.net/2013/03/17/Container%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://sharecore.net/2013/03/17/Container的安装与使用介绍/</id>
    <published>2013-03-16T16:36:33.000Z</published>
    <updated>2016-06-26T07:37:57.000Z</updated>
    
    <content type="html">&lt;p&gt;今天想在机器上搭建一个我用Go写的玩的一个分布式文件小系统，可我只有一台Laptop和一台Desktop，两台都装的Ubuntu 12.04。我需要多几个隔离的OS来试验多节点。以前阅读看到过Linux Container的介绍，于是研究了下，用它来搭建了虚拟环境，在此作个记录，方便大家：&lt;br&gt;首先，安装 Linux Container:&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install lxc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接“yes”，继续完成安装。这一步能比较快的完成，只有13M多点的文件要下载。当然，完成这一步也只是完成了容器程序的安装，虚拟OS的安装在后面。&lt;/p&gt;
&lt;p&gt;安装完Linux Contaner后，可以在/usr/lib/lxc/templates目录下看到，可以安装哪些OS进来。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ll /usr/lib/lxc/templates/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt; ./&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt; ../&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;8227&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-busybox\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;9806&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-debian\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;10520&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-fedora\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;9094&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-opensuse\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;number&quot;&gt;5115&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-sshd\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;19736&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-ubuntu\*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;10590&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; lxc-ubuntu-cloud\*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来，可以建立虚拟OS了：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo lxc-create -t ubuntu -n lxc\_ubuntu\_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-t: OS类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-n: 虚拟OS的名称&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一步需要比较长的时间，当然，也取决于你的网络下载速度。&lt;/p&gt;
&lt;p&gt;虚拟OS的版本，如果安装时没特别指定参数，与Host OS的版本是相同他的，比如host OS是i386，那安装的也是i386。可以用以下参数指定版本：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo lxc-create -t ubuntu -n lxc\_ubuntu\_1 -- -r lucid &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; i386&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虚拟OS安装完成后，&lt;strong&gt;注意输出最后两行的用户名和密码提示，这是登录虚拟OS的默认帐号。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;你可以通过下面方式查看：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ll /var/lib/lxc/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt; ./&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt; ../&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; root root &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;月 &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; lxc\_ubuntu\_1/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，虚拟OS安装完成了，你可以先更新package。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get updata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，可以启动虚拟OS了。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo lxc-start -n lxc\_ubuntu\_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时，如果需要安装多个虚拟OS，可以使用复制命令完成复制：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo lxc-clone -o lxc\_ubuntu\_1 -n lxc\_ubuntu\_2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以删除已安装的虚拟OS：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo lxc-destroy -n lxc\_ubuntu\_2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天想在机器上搭建一个我用Go写的玩的一个分布式文件小系统，可我只有一台Laptop和一台Desktop，两台都装的Ubuntu 12.04。我需要多几个隔离的OS来试验多节点。以前阅读看到过Linux Container的介绍，于是研究了下，用它来搭建了虚拟环境，在此作个
    
    </summary>
    
    
      <category term="Linux" scheme="http://sharecore.net/tags/Linux/"/>
    
      <category term="技术" scheme="http://sharecore.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
